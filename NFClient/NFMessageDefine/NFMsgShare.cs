// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgShare.proto</summary>
  public static partial class NFMsgShareReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgShare.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgShareReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBORk1zZ1NoYXJlLnByb3RvEgVORk1zZxoOTkZEZWZpbmUucHJvdG8aD05G",
            "TXNnQmFzZS5wcm90byJeChJSZXFFbnRlckdhbWVTZXJ2ZXISGAoCaWQYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIPCgdhY2NvdW50GAIgASgMEg8KB2dhbWVfaWQY",
            "AyABKAUSDAoEbmFtZRgEIAEoDCIlChZSZXFBY2tFbnRlckdhbWVTdWNjZXNz",
            "EgsKA2FyZxgBIAEoBSIbCgxSZXFIZWFydEJlYXQSCwoDYXJnGAEgASgFIiEK",
            "ElJlcUxlYXZlR2FtZVNlcnZlchILCgNhcmcYASABKAUitwEKD1BsYXllckVu",
            "dHJ5SW5mbxIhCgtvYmplY3RfZ3VpZBgBIAEoCzIMLk5GTXNnLklkZW50EgkK",
            "AXgYAiABKAISCQoBeRgDIAEoAhIJCgF6GAQgASgCEhMKC2NhcmVlcl90eXBl",
            "GAUgASgFEhQKDHBsYXllcl9zdGF0ZRgGIAEoBRIRCgljb25maWdfaWQYByAB",
            "KAwSEAoIc2NlbmVfaWQYCCABKAUSEAoIY2xhc3NfaWQYCSABKAwiQQoSQWNr",
            "UGxheWVyRW50cnlMaXN0EisKC29iamVjdF9saXN0GAEgAygLMhYuTkZNc2cu",
            "UGxheWVyRW50cnlJbmZvIjcKEkFja1BsYXllckxlYXZlTGlzdBIhCgtvYmpl",
            "Y3RfbGlzdBgBIAMoCzIMLk5GTXNnLklkZW50IoYCCg1SZXFBY2tTeW5EYXRh",
            "EhsKBXN5c2VyGAEgASgLMgwuTkZNc2cuSWRlbnQSIQoLb2JqZWN0X2xpc3QY",
            "AiADKAsyDC5ORk1zZy5JZGVudBIMCgRkYXRhGAMgASgMEi4KCHN5bl90eXBl",
            "GAQgASgOMhwuTkZNc2cuUmVxQWNrU3luRGF0YS5TeW5UeXBlEiAKBm1zZ19p",
            "ZBgFIAEoDjIQLk5GTXNnLkVTeW5Nc2dJRCJVCgdTeW5UeXBlEg4KCkVTVF9V",
            "TktOT1cQABINCglFU1RfR1JPVVAQARINCglFU1RfU0NFTkUQAhIMCghFU1Rf",
            "Q0xBThADEg4KCkVTVF9GUklFTkQQBCLhAQoQUmVxQWNrUGxheWVyTW92ZRIb",
            "CgVtb3ZlchgBIAEoCzIMLk5GTXNnLklkZW50EhAKCG1vdmVUeXBlGAIgASgF",
            "Eg0KBXNwZWVkGAMgASgCEgwKBHRpbWUYBCABKAUSEQoJbGFzdFN0YXRlGAUg",
            "ASgFEiIKCnRhcmdldF9wb3MYBiADKAsyDi5ORk1zZy5WZWN0b3IzEiIKCnNv",
            "dXJjZV9wb3MYByADKAsyDi5ORk1zZy5WZWN0b3IzEiYKDm1vdmVfZGlyZWN0",
            "aW9uGAggAygLMg4uTkZNc2cuVmVjdG9yMyKuAwoQUmVxQWNrUGxheWVyQ2hh",
            "dBIdCgdjaGF0X2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSOAoJY2hhdF90eXBl",
            "GAIgASgOMiUuTkZNc2cuUmVxQWNrUGxheWVyQ2hhdC5FR2FtZUNoYXRUeXBl",
            "EhEKCWNoYXRfaW5mbxgDIAEoDBIRCgljaGF0X25hbWUYBCABKAwSHwoJdGFy",
            "Z2V0X2lkGAUgASgLMgwuTkZNc2cuSWRlbnQSPQoOQ29udGFpbmVyX2RhdGEY",
            "BiADKAsyJS5ORk1zZy5SZXFBY2tQbGF5ZXJDaGF0LkNoYXRDb250YWluZXIa",
            "agoNQ2hhdENvbnRhaW5lchIVCg1Db25UYWluZXJUeXBlGAIgASgFEhEKCWRh",
            "dGFfaW5mbxgDIAEoDCIvCg1Db250YWluZXJUeXBlEg8KC0VHQ1RfVU5LTk9X",
            "EAASDQoJRUdDVF9JVEVNEAEiTwoNRUdhbWVDaGF0VHlwZRINCglFR0NUX0NM",
            "QU4QABIQCgxFR0NUX1BSSVZBVEUQARINCglFR0NUX1RFQU0QAhIOCgpFR0NU",
            "X1dPUkxEEAMivwEKE1JlcUFja1BsYXllclBvc1N5bmMSGwoFbW92ZXIYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIMCgR0aW1lGAIgASgFEhkKEUludGVycG9sYXRp",
            "b25UaW1lGAMgASgCEiAKCHBvc2l0aW9uGAQgASgLMg4uTkZNc2cuVmVjdG9y",
            "MxIhCglkaXJlY3Rpb24YBSABKAsyDi5ORk1zZy5WZWN0b3IzEg4KBnN0YXR1",
            "cxgGIAEoBRINCgVmcmFtZRgHIAEoBSLTAQoKRWZmZWN0RGF0YRIiCgxlZmZl",
            "Y3RfaWRlbnQYASABKAsyDC5ORk1zZy5JZGVudBIUCgxlZmZlY3RfdmFsdWUY",
            "AiABKAUSMQoKZWZmZWN0X3JsdBgDIAEoDjIdLk5GTXNnLkVmZmVjdERhdGEu",
            "RVJlc3VsdFR5cGUiWAoLRVJlc3VsdFR5cGUSDAoIRUVUX0ZBSUwQABIPCgtF",
            "RVRfU1VDQ0VTUxABEg4KCkVFVF9SRUZVU0UQAhIMCghFRVRfTUlTUxADEgwK",
            "CEVFVF9DUklUEAQieQoOUmVxQWNrVXNlU2tpbGwSGgoEdXNlchgBIAEoCzIM",
            "Lk5GTXNnLklkZW50EhAKCHNraWxsX2lkGAIgASgMEhEKCXVzZV9pbmRleBgD",
            "IAEoBRImCgtlZmZlY3RfZGF0YRgEIAMoCzIRLk5GTXNnLkVmZmVjdERhdGEi",
            "1wEKDVJlcUFja1VzZUl0ZW0SGgoEdXNlchgBIAEoCzIMLk5GTXNnLklkZW50",
            "Eh8KCWl0ZW1fZ3VpZBgCIAEoCzIMLk5GTXNnLklkZW50EiYKC2VmZmVjdF9k",
            "YXRhGAMgAygLMhEuTkZNc2cuRWZmZWN0RGF0YRIfCgRpdGVtGAQgASgLMhEu",
            "TkZNc2cuSXRlbVN0cnVjdBIeCgh0YXJnZXRpZBgFIAEoCzIMLk5GTXNnLklk",
            "ZW50EiAKCHBvc2l0aW9uGAYgASgLMg4uTkZNc2cuVmVjdG9yMyLzAQoPUmVx",
            "QWNrU3dhcFNjZW5lEjsKDXRyYW5zZmVyX3R5cGUYASABKA4yJC5ORk1zZy5S",
            "ZXFBY2tTd2FwU2NlbmUuRUdhbWVTd2FwVHlwZRIQCghzY2VuZV9pZBgCIAEo",
            "BRIPCgdsaW5lX2lkGAMgASgFEgkKAXgYBCABKAISCQoBeRgFIAEoAhIJCgF6",
            "GAYgASgCEgwKBGRhdGEYByABKAwiUQoNRUdhbWVTd2FwVHlwZRIPCgtFR1NU",
            "X05BUk1BTBAAEg4KCkVHU1RfQ0xPTkUQARIOCgpFR1NUX0FSRU5BEAISDwoL",
            "RUdTVF9NSVJST1IQAyIfCg9SZXFBY2tIb21lU2NlbmUSDAoEZGF0YRgBIAEo",
            "DCIxCgpJdGVtU3RydWN0Eg8KB2l0ZW1faWQYASABKAwSEgoKaXRlbV9jb3Vu",
            "dBgCIAEoBSI/Cg5DdXJyZW5jeVN0cnVjdBIVCg1jdXJyZW5jeV90eXBlGAEg",
            "ASgFEhYKDmN1cnJlbmN5X2NvdW50GAIgASgFIjIKEVJlcUFja1N0YXJ0QmF0",
            "dGxlEgwKBGdvbGQYASABKAUSDwoHZGlhbW9uZBgCIAEoBSIOCgxSZXFFbmRC",
            "YXR0bGUiPgoMUmVxQWNrUmVsaXZlEg8KB2RpYW1vbmQYASABKAUSHQoHaGVy",
            "b19pZBgCIAEoCzIMLk5GTXNnLklkZW50InsKDEFja0VuZEJhdHRsZRILCgN3",
            "aW4YASABKAUSDAoEc3RhchgCIAEoBRIMCgRnb2xkGAMgASgFEgsKA2V4cBgE",
            "IAEoBRIPCgdkaWFtb25kGAUgASgFEiQKCWl0ZW1fbGlzdBgGIAMoCzIRLk5G",
            "TXNnLkl0ZW1TdHJ1Y3QiMgoPUmVxUGlja0Ryb3BJdGVtEh8KCWl0ZW1fZ3Vp",
            "ZBgCIAEoCzIMLk5GTXNnLklkZW50IiAKDVJlcUFjY2VwdFRhc2sSDwoHdGFz",
            "a19pZBgBIAEoDCIjChBSZXFDb21wZWxldGVUYXNrEg8KB3Rhc2tfaWQYASAB",
            "KAwi7wEKElJlcUFja0pvaW5BY3Rpdml0eRJCCg1hY3Rpdml0eV90eXBlGAEg",
            "ASgOMisuTkZNc2cuUmVxQWNrSm9pbkFjdGl2aXR5LkVHYW1lQWN0aXZpdHlU",
            "eXBlEkkKEXN1Yl9hY3Rpdml0eV90eXBlGAIgASgOMi4uTkZNc2cuUmVxQWNr",
            "Sm9pbkFjdGl2aXR5LkVHYW1lQWN0aXZpdHlTdWJUeXBlIiEKEUVHYW1lQWN0",
            "aXZpdHlUeXBlEgwKCEVHQVRfUFZQEAAiJwoURUdhbWVBY3Rpdml0eVN1YlR5",
            "cGUSDwoLRUdBVF9OT1JNQUwQACJEChBSZXFBY2tDcmVhdGVDbGFuEh0KB2Ns",
            "YW5faWQYASABKAsyDC5ORk1zZy5JZGVudBIRCgljbGFuX25hbWUYAiABKAwi",
            "IgoNUmVxU2VhcmNoQ2xhbhIRCgljbGFuX25hbWUYASABKAwihAIKDUFja1Nl",
            "YXJjaENsYW4SOAoJY2xhbl9saXN0GAEgAygLMiUuTkZNc2cuQWNrU2VhcmNo",
            "Q2xhbi5TZWFyY2hDbGFuT2JqZWN0GrgBChBTZWFyY2hDbGFuT2JqZWN0Eh0K",
            "B2NsYW5fSUQYASABKAsyDC5ORk1zZy5JZGVudBIRCgljbGFuX25hbWUYAiAB",
            "KAwSEQoJY2xhbl9pY29uGAMgASgMEhkKEWNsYW5fbWVtYmVyX2NvdW50GAQg",
            "ASgFEh0KFWNsYW5fbWVtYmVyX21heF9jb3VudBgFIAEoBRISCgpjbGFuX2hv",
            "bm9yGAYgASgFEhEKCWNsYW5fcmFuaxgHIAEoBSJCCg5SZXFBY2tKb2luQ2xh",
            "bhIdCgdjbGFuX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSEQoJY2xhbl9uYW1l",
            "GAIgASgMIkMKD1JlcUFja0xlYXZlQ2xhbhIdCgdjbGFuX2lkGAEgASgLMgwu",
            "TkZNc2cuSWRlbnQSEQoJY2xhbl9uYW1lGAIgASgMItUBChNSZXFBY2tPcHJD",
            "bGFuTWVtYmVyEh0KB2NsYW5faWQYASABKAsyDC5ORk1zZy5JZGVudBIfCglt",
            "ZW1iZXJfaWQYAiABKAsyDC5ORk1zZy5JZGVudBI8CgR0eXBlGAMgASgOMi4u",
            "TkZNc2cuUmVxQWNrT3ByQ2xhbk1lbWJlci5FR0NsYW5NZW1iZXJPcHJUeXBl",
            "IkAKE0VHQ2xhbk1lbWJlck9wclR5cGUSDQoJRUdBVF9ET1dOEAASCwoHRUdB",
            "VF9VUBABEg0KCUVHQVRfS0lDSxACIjMKElJlcUVudGVyQ2xhbkVjdHlwZRId",
            "CgdjbGFuX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQiPAoPUmVxU2V0RmlnaHRI",
            "ZXJvEhwKBkhlcm9pZBgBIAEoCzIMLk5GTXNnLklkZW50EgsKA1NldBgCIAEo",
            "BSIyChJSZXFTd2l0Y2hGaWdodEhlcm8SHAoGSGVyb2lkGAEgASgLMgwuTkZN",
            "c2cuSWRlbnQiMwoSUmVxQnV5SXRlbUZyb21TaG9wEg4KBml0ZW1JRBgBIAEo",
            "DBINCgVjb3VudBgCIAEoBSI1ChFSZXFBZGRHYW1ibGVWYWx1ZRIQCghwcm9w",
            "ZXJ0eRgBIAEoDBIOCgZudW1iZXIYAiABKAUiMwoOUmVxTWluaW5nVGl0bGUS",
            "CQoBeBgBIAEoBRIJCgF5GAIgASgFEgsKA29wchgDIAEoBSIuCglUaWxlU3Rh",
            "dGUSCQoBeBgBIAEoBRIJCgF5GAIgASgFEgsKA29wchgDIAEoBSJSCgxUaWxl",
            "QnVpbGRpbmcSCQoBeBgBIAEoBRIJCgF5GAIgASgFEhAKCGNvbmZpZ0lEGAMg",
            "ASgMEhoKBGd1aWQYBCABKAsyDC5ORk1zZy5JZGVudCJNCgdUaWxlTlBDEgkK",
            "AXgYASABKAUSCQoBeRgCIAEoBRIQCghjb25maWdJRBgDIAEoDBIaCgRndWlk",
            "GAQgASgLMgwuTkZNc2cuSWRlbnQidAoOQWNrTWluaW5nVGl0bGUSHgoEdGls",
            "ZRgBIAMoCzIQLk5GTXNnLlRpbGVTdGF0ZRIlCghidWlsZGluZxgCIAMoCzIT",
            "Lk5GTXNnLlRpbGVCdWlsZGluZxIbCgNucGMYAyADKAsyDi5ORk1zZy5UaWxl",
            "TlBDIiYKEFJlcVNlYXJjaE9wcG5lbnQSEgoKc2VsZl9zY2VuZRgBIAEoBSL/",
            "AwoQQWNrU2VhcmNoT3BwbmVudBIQCghzY2VuZV9pZBgBIAEoBRIMCgRnb2xk",
            "GAIgASgFEg8KB2RpYW1vbmQYAyABKAUSDQoFbGV2ZWwYBCABKAUSCwoDY3Vw",
            "GAUgASgFEgwKBG5hbWUYBiABKAwSDAoEaGVhZBgHIAEoDBIRCgloZXJvX2Nu",
            "ZjEYCCABKAwSEgoKaGVyb19zdGFyMRgJIAEoBRIRCgloZXJvX2NuZjIYCiAB",
            "KAwSEgoKaGVyb19zdGFyMhgLIAEoBRIRCgloZXJvX2NuZjMYDCABKAwSEgoK",
            "aGVyb19zdGFyMxgNIAEoBRIeCghoZXJvX2lkMRgUIAEoCzIMLk5GTXNnLklk",
            "ZW50Eh4KCGhlcm9faWQyGBUgASgLMgwuTkZNc2cuSWRlbnQSHgoIaGVyb19p",
            "ZDMYFiABKAsyDC5ORk1zZy5JZGVudBIhCgloZXJvX3BvczEYFyABKAsyDi5O",
            "Rk1zZy5WZWN0b3IzEiEKCWhlcm9fcG9zMhgYIAEoCzIOLk5GTXNnLlZlY3Rv",
            "cjMSIQoJaGVyb19wb3MzGBkgASgLMg4uTkZNc2cuVmVjdG9yMxIkCgV0aXRs",
            "ZRgeIAEoCzIVLk5GTXNnLkFja01pbmluZ1RpdGxlEh4KCG9wcG9uZW50GB8g",
            "ASgLMgwuTkZNc2cuSWRlbnQigQEKC1JlcVNlbmRNYWlsEh4KCHJlY2lldmVy",
            "GAEgASgLMgwuTkZNc2cuSWRlbnQSJAoJaXRlbV9saXN0GAIgAygLMhEuTkZN",
            "c2cuSXRlbVN0cnVjdBIsCg1jdXJyZW5jeV9saXN0GAMgAygLMhUuTkZNc2cu",
            "Q3VycmVuY3lTdHJ1Y3QiuQEKD1JlcVN3aXRjaFNlcnZlchIcCgZzZWxmaWQY",
            "ASABKAsyDC5ORk1zZy5JZGVudBIVCg1zZWxmX3NlcnZlcmlkGAIgASgDEhcK",
            "D3RhcmdldF9zZXJ2ZXJpZBgDIAEoAxIVCg1nYXRlX3NlcnZlcmlkGAQgASgD",
            "Eg8KB1NjZW5lSUQYBSABKAMSHwoJY2xpZW50X2lkGAYgASgLMgwuTkZNc2cu",
            "SWRlbnQSDwoHZ3JvdXBJRBgHIAEoAyJ2Cg9BY2tTd2l0Y2hTZXJ2ZXISHAoG",
            "c2VsZmlkGAEgASgLMgwuTkZNc2cuSWRlbnQSFQoNc2VsZl9zZXJ2ZXJpZBgC",
            "IAEoAxIXCg90YXJnZXRfc2VydmVyaWQYAyABKAMSFQoNZ2F0ZV9zZXJ2ZXJp",
            "ZBgEIAEoAyLxAQoLUFZQUm9vbUluZm8SEwoLbkNlbGxTdGF0dXMYASABKAUS",
            "HAoGUm9vbUlEGAIgASgLMgwuTkZNc2cuSWRlbnQSEAoIblBWUE1vZGUYAyAB",
            "KAUSEQoJblBWUEdyYWRlGAQgASgFEhEKCU1heFBhbHllchgFIAEoBRIgCgp4",
            "UmVkUGxheWVyGAYgAygLMgwuTkZNc2cuSWRlbnQSIQoLeEJsdWVQbGF5ZXIY",
            "ByADKAsyDC5ORk1zZy5JZGVudBIQCghzZXJ2ZXJpZBgIIAEoAxIPCgdTY2Vu",
            "ZUlEGAkgASgDEg8KB2dyb3VwSUQYCiABKAMivgEKEFJlcVBWUEFwcGx5TWF0",
            "Y2gSHQoHc2VsZl9pZBgBIAEoCzIMLk5GTXNnLklkZW50EhAKCG5QVlBNb2Rl",
            "GAIgASgFEg0KBXNjb3JlGAMgASgDEhEKCUFwcGx5VHlwZRgEIAEoBRIdCgd0",
            "ZWFtX2lkGAUgASgLMgwuTkZNc2cuSWRlbnQiOAoKRUFwcGx5VHlwZRIVChFF",
            "QXBwbHlUeXBlX1NpbmdsZRAAEhMKD0VBcHBseVR5cGVfVGVhbRABInwKEEFj",
            "a1BWUEFwcGx5TWF0Y2gSHQoHc2VsZl9pZBgBIAEoCzIMLk5GTXNnLklkZW50",
            "EiUKCXhSb29tSW5mbxgCIAEoCzISLk5GTXNnLlBWUFJvb21JbmZvEhEKCUFw",
            "cGx5VHlwZRgDIAEoBRIPCgduUmVzdWx0GAQgASgFIloKElJlcUNyZWF0ZVBW",
            "UEVjdHlwZRIdCgdzZWxmX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSJQoJeFJv",
            "b21JbmZvGAIgASgLMhIuTkZNc2cuUFZQUm9vbUluZm8ibQoSQWNrQ3JlYXRl",
            "UFZQRWN0eXBlEh0KB3NlbGZfaWQYASABKAsyDC5ORk1zZy5JZGVudBIlCgl4",
            "Um9vbUluZm8YAiABKAsyEi5ORk1zZy5QVlBSb29tSW5mbxIRCglBcHBseVR5",
            "cGUYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFDefineReflection.Descriptor, global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEnterGameServer), global::NFMsg.ReqEnterGameServer.Parser, new[]{ "Id", "Account", "GameId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckEnterGameSuccess), global::NFMsg.ReqAckEnterGameSuccess.Parser, new[]{ "Arg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqHeartBeat), global::NFMsg.ReqHeartBeat.Parser, new[]{ "Arg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqLeaveGameServer), global::NFMsg.ReqLeaveGameServer.Parser, new[]{ "Arg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PlayerEntryInfo), global::NFMsg.PlayerEntryInfo.Parser, new[]{ "ObjectGuid", "X", "Y", "Z", "CareerType", "PlayerState", "ConfigId", "SceneId", "ClassId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerEntryList), global::NFMsg.AckPlayerEntryList.Parser, new[]{ "ObjectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerLeaveList), global::NFMsg.AckPlayerLeaveList.Parser, new[]{ "ObjectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckSynData), global::NFMsg.ReqAckSynData.Parser, new[]{ "Syser", "ObjectList", "Data", "SynType", "MsgId" }, null, new[]{ typeof(global::NFMsg.ReqAckSynData.Types.SynType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerMove), global::NFMsg.ReqAckPlayerMove.Parser, new[]{ "Mover", "MoveType", "Speed", "Time", "LastState", "TargetPos", "SourcePos", "MoveDirection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerChat), global::NFMsg.ReqAckPlayerChat.Parser, new[]{ "ChatId", "ChatType", "ChatInfo", "ChatName", "TargetId", "ContainerData" }, null, new[]{ typeof(global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerChat.Types.ChatContainer), global::NFMsg.ReqAckPlayerChat.Types.ChatContainer.Parser, new[]{ "ConTainerType", "DataInfo" }, null, new[]{ typeof(global::NFMsg.ReqAckPlayerChat.Types.ChatContainer.Types.ContainerType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerPosSync), global::NFMsg.ReqAckPlayerPosSync.Parser, new[]{ "Mover", "Time", "InterpolationTime", "Position", "Direction", "Status", "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.EffectData), global::NFMsg.EffectData.Parser, new[]{ "EffectIdent", "EffectValue", "EffectRlt" }, null, new[]{ typeof(global::NFMsg.EffectData.Types.EResultType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckUseSkill), global::NFMsg.ReqAckUseSkill.Parser, new[]{ "User", "SkillId", "UseIndex", "EffectData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckUseItem), global::NFMsg.ReqAckUseItem.Parser, new[]{ "User", "ItemGuid", "EffectData", "Item", "Targetid", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckSwapScene), global::NFMsg.ReqAckSwapScene.Parser, new[]{ "TransferType", "SceneId", "LineId", "X", "Y", "Z", "Data" }, null, new[]{ typeof(global::NFMsg.ReqAckSwapScene.Types.EGameSwapType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckHomeScene), global::NFMsg.ReqAckHomeScene.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ItemStruct), global::NFMsg.ItemStruct.Parser, new[]{ "ItemId", "ItemCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.CurrencyStruct), global::NFMsg.CurrencyStruct.Parser, new[]{ "CurrencyType", "CurrencyCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckStartBattle), global::NFMsg.ReqAckStartBattle.Parser, new[]{ "Gold", "Diamond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEndBattle), global::NFMsg.ReqEndBattle.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckRelive), global::NFMsg.ReqAckRelive.Parser, new[]{ "Diamond", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckEndBattle), global::NFMsg.AckEndBattle.Parser, new[]{ "Win", "Star", "Gold", "Exp", "Diamond", "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqPickDropItem), global::NFMsg.ReqPickDropItem.Parser, new[]{ "ItemGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAcceptTask), global::NFMsg.ReqAcceptTask.Parser, new[]{ "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqCompeleteTask), global::NFMsg.ReqCompeleteTask.Parser, new[]{ "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckJoinActivity), global::NFMsg.ReqAckJoinActivity.Parser, new[]{ "ActivityType", "SubActivityType" }, null, new[]{ typeof(global::NFMsg.ReqAckJoinActivity.Types.EGameActivityType), typeof(global::NFMsg.ReqAckJoinActivity.Types.EGameActivitySubType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCreateClan), global::NFMsg.ReqAckCreateClan.Parser, new[]{ "ClanId", "ClanName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSearchClan), global::NFMsg.ReqSearchClan.Parser, new[]{ "ClanName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchClan), global::NFMsg.AckSearchClan.Parser, new[]{ "ClanList" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchClan.Types.SearchClanObject), global::NFMsg.AckSearchClan.Types.SearchClanObject.Parser, new[]{ "ClanID", "ClanName", "ClanIcon", "ClanMemberCount", "ClanMemberMaxCount", "ClanHonor", "ClanRank" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckJoinClan), global::NFMsg.ReqAckJoinClan.Parser, new[]{ "ClanId", "ClanName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckLeaveClan), global::NFMsg.ReqAckLeaveClan.Parser, new[]{ "ClanId", "ClanName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckOprClanMember), global::NFMsg.ReqAckOprClanMember.Parser, new[]{ "ClanId", "MemberId", "Type" }, null, new[]{ typeof(global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEnterClanEctype), global::NFMsg.ReqEnterClanEctype.Parser, new[]{ "ClanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSetFightHero), global::NFMsg.ReqSetFightHero.Parser, new[]{ "Heroid", "Set" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSwitchFightHero), global::NFMsg.ReqSwitchFightHero.Parser, new[]{ "Heroid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBuyItemFromShop), global::NFMsg.ReqBuyItemFromShop.Parser, new[]{ "ItemID", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAddGambleValue), global::NFMsg.ReqAddGambleValue.Parser, new[]{ "Property", "Number" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqMiningTitle), global::NFMsg.ReqMiningTitle.Parser, new[]{ "X", "Y", "Opr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TileState), global::NFMsg.TileState.Parser, new[]{ "X", "Y", "Opr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TileBuilding), global::NFMsg.TileBuilding.Parser, new[]{ "X", "Y", "ConfigID", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TileNPC), global::NFMsg.TileNPC.Parser, new[]{ "X", "Y", "ConfigID", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckMiningTitle), global::NFMsg.AckMiningTitle.Parser, new[]{ "Tile", "Building", "Npc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSearchOppnent), global::NFMsg.ReqSearchOppnent.Parser, new[]{ "SelfScene" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchOppnent), global::NFMsg.AckSearchOppnent.Parser, new[]{ "SceneId", "Gold", "Diamond", "Level", "Cup", "Name", "Head", "HeroCnf1", "HeroStar1", "HeroCnf2", "HeroStar2", "HeroCnf3", "HeroStar3", "HeroId1", "HeroId2", "HeroId3", "HeroPos1", "HeroPos2", "HeroPos3", "Title", "Opponent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSendMail), global::NFMsg.ReqSendMail.Parser, new[]{ "Reciever", "ItemList", "CurrencyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSwitchServer), global::NFMsg.ReqSwitchServer.Parser, new[]{ "Selfid", "SelfServerid", "TargetServerid", "GateServerid", "SceneID", "ClientId", "GroupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSwitchServer), global::NFMsg.AckSwitchServer.Parser, new[]{ "Selfid", "SelfServerid", "TargetServerid", "GateServerid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PVPRoomInfo), global::NFMsg.PVPRoomInfo.Parser, new[]{ "NCellStatus", "RoomID", "NPVPMode", "NPVPGrade", "MaxPalyer", "XRedPlayer", "XBluePlayer", "Serverid", "SceneID", "GroupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqPVPApplyMatch), global::NFMsg.ReqPVPApplyMatch.Parser, new[]{ "SelfId", "NPVPMode", "Score", "ApplyType", "TeamId" }, null, new[]{ typeof(global::NFMsg.ReqPVPApplyMatch.Types.EApplyType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPVPApplyMatch), global::NFMsg.AckPVPApplyMatch.Parser, new[]{ "SelfId", "XRoomInfo", "ApplyType", "NResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqCreatePVPEctype), global::NFMsg.ReqCreatePVPEctype.Parser, new[]{ "SelfId", "XRoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckCreatePVPEctype), global::NFMsg.AckCreatePVPEctype.Parser, new[]{ "SelfId", "XRoomInfo", "ApplyType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReqEnterGameServer : pb::IMessage {
    private static readonly pb::MessageParser<ReqEnterGameServer> _parser = new pb::MessageParser<ReqEnterGameServer>(() => (ReqEnterGameServer)MessagePool.Instance.Fetch(typeof(ReqEnterGameServer)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer(ReqEnterGameServer other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      account_ = other.account_;
      gameId_ = other.gameId_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer Clone() {
      return new ReqEnterGameServer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Account != other.Account) return false;
      if (GameId != other.GameId) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Account);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            Account = input.ReadBytes();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckEnterGameSuccess : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckEnterGameSuccess> _parser = new pb::MessageParser<ReqAckEnterGameSuccess>(() => (ReqAckEnterGameSuccess)MessagePool.Instance.Fetch(typeof(ReqAckEnterGameSuccess)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckEnterGameSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess(ReqAckEnterGameSuccess other) : this() {
      arg_ = other.arg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess Clone() {
      return new ReqAckEnterGameSuccess(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckEnterGameSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckEnterGameSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqHeartBeat : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeartBeat> _parser = new pb::MessageParser<ReqHeartBeat>(() => (ReqHeartBeat)MessagePool.Instance.Fetch(typeof(ReqHeartBeat)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat(ReqHeartBeat other) : this() {
      arg_ = other.arg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat Clone() {
      return new ReqHeartBeat(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqLeaveGameServer : pb::IMessage {
    private static readonly pb::MessageParser<ReqLeaveGameServer> _parser = new pb::MessageParser<ReqLeaveGameServer>(() => (ReqLeaveGameServer)MessagePool.Instance.Fetch(typeof(ReqLeaveGameServer)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer(ReqLeaveGameServer other) : this() {
      arg_ = other.arg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer Clone() {
      return new ReqLeaveGameServer(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerEntryInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerEntryInfo> _parser = new pb::MessageParser<PlayerEntryInfo>(() => (PlayerEntryInfo)MessagePool.Instance.Fetch(typeof(PlayerEntryInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEntryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo(PlayerEntryInfo other) : this() {
      ObjectGuid = other.objectGuid_ != null ? other.ObjectGuid.Clone() : null;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      careerType_ = other.careerType_;
      playerState_ = other.playerState_;
      configId_ = other.configId_;
      sceneId_ = other.sceneId_;
      classId_ = other.classId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo Clone() {
      return new PlayerEntryInfo(this);
    }

    /// <summary>Field number for the "object_guid" field.</summary>
    public const int ObjectGuidFieldNumber = 1;
    private global::NFMsg.Ident objectGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ObjectGuid {
      get { return objectGuid_; }
      set {
        objectGuid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "career_type" field.</summary>
    public const int CareerTypeFieldNumber = 5;
    private int careerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CareerType {
      get { return careerType_; }
      set {
        careerType_ = value;
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int PlayerStateFieldNumber = 6;
    private int playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 7;
    private pb::ByteString configId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigId {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 8;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "class_id" field.</summary>
    public const int ClassIdFieldNumber = 9;
    private pb::ByteString classId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEntryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEntryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectGuid, other.ObjectGuid)) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (CareerType != other.CareerType) return false;
      if (PlayerState != other.PlayerState) return false;
      if (ConfigId != other.ConfigId) return false;
      if (SceneId != other.SceneId) return false;
      if (ClassId != other.ClassId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectGuid_ != null) hash ^= ObjectGuid.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (CareerType != 0) hash ^= CareerType.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      if (ConfigId.Length != 0) hash ^= ConfigId.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectGuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectGuid);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (CareerType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CareerType);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerState);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ConfigId);
      }
      if (SceneId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SceneId);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ClassId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectGuid);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (CareerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CareerType);
      }
      if (PlayerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerState);
      }
      if (ConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClassId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (objectGuid_ == null) {
              objectGuid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(objectGuid_);
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 40: {
            CareerType = input.ReadInt32();
            break;
          }
          case 48: {
            PlayerState = input.ReadInt32();
            break;
          }
          case 58: {
            ConfigId = input.ReadBytes();
            break;
          }
          case 64: {
            SceneId = input.ReadInt32();
            break;
          }
          case 74: {
            ClassId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerEntryList : pb::IMessage {
    private static readonly pb::MessageParser<AckPlayerEntryList> _parser = new pb::MessageParser<AckPlayerEntryList>(() => (AckPlayerEntryList)MessagePool.Instance.Fetch(typeof(AckPlayerEntryList)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerEntryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList(AckPlayerEntryList other) : this() {
      objectList_ = other.objectList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList Clone() {
      return new AckPlayerEntryList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.PlayerEntryInfo> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.PlayerEntryInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> objectList_ = new pbc::RepeatedField<global::NFMsg.PlayerEntryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerEntryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerEntryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerLeaveList : pb::IMessage {
    private static readonly pb::MessageParser<AckPlayerLeaveList> _parser = new pb::MessageParser<AckPlayerLeaveList>(() => (AckPlayerLeaveList)MessagePool.Instance.Fetch(typeof(AckPlayerLeaveList)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerLeaveList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList(AckPlayerLeaveList other) : this() {
      objectList_ = other.objectList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList Clone() {
      return new AckPlayerLeaveList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> objectList_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerLeaveList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerLeaveList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckSynData : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckSynData> _parser = new pb::MessageParser<ReqAckSynData>(() => (ReqAckSynData)MessagePool.Instance.Fetch(typeof(ReqAckSynData)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSynData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData(ReqAckSynData other) : this() {
      Syser = other.syser_ != null ? other.Syser.Clone() : null;
      objectList_ = other.objectList_.Clone();
      data_ = other.data_;
      synType_ = other.synType_;
      msgId_ = other.msgId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData Clone() {
      return new ReqAckSynData(this);
    }

    /// <summary>Field number for the "syser" field.</summary>
    public const int SyserFieldNumber = 1;
    private global::NFMsg.Ident syser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Syser {
      get { return syser_; }
      set {
        syser_ = value;
      }
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> objectList_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> ObjectList {
      get { return objectList_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "syn_type" field.</summary>
    public const int SynTypeFieldNumber = 4;
    private global::NFMsg.ReqAckSynData.Types.SynType synType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckSynData.Types.SynType SynType {
      get { return synType_; }
      set {
        synType_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 5;
    private global::NFMsg.ESynMsgID msgId_ = 0;
    /// <summary>
    ///有消息ID限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ESynMsgID MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSynData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSynData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Syser, other.Syser)) return false;
      if(!objectList_.Equals(other.objectList_)) return false;
      if (Data != other.Data) return false;
      if (SynType != other.SynType) return false;
      if (MsgId != other.MsgId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (syser_ != null) hash ^= Syser.GetHashCode();
      hash ^= objectList_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (SynType != 0) hash ^= SynType.GetHashCode();
      if (MsgId != 0) hash ^= MsgId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (syser_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Syser);
      }
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (SynType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SynType);
      }
      if (MsgId != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MsgId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (syser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Syser);
      }
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (SynType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SynType);
      }
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (syser_ == null) {
              syser_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(syser_);
            break;
          }
          case 18: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            synType_ = (global::NFMsg.ReqAckSynData.Types.SynType) input.ReadEnum();
            break;
          }
          case 40: {
            msgId_ = (global::NFMsg.ESynMsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSynData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SynType {
        /// <summary>
        /// </summary>
        [pbr::OriginalName("EST_UNKNOW")] EstUnknow = 0,
        /// <summary>
        ///层
        /// </summary>
        [pbr::OriginalName("EST_GROUP")] EstGroup = 1,
        /// <summary>
        ///场景
        /// </summary>
        [pbr::OriginalName("EST_SCENE")] EstScene = 2,
        /// <summary>
        ///公会
        /// </summary>
        [pbr::OriginalName("EST_CLAN")] EstClan = 3,
        /// <summary>
        ///好友
        /// </summary>
        [pbr::OriginalName("EST_FRIEND")] EstFriend = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqAckPlayerMove : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckPlayerMove> _parser = new pb::MessageParser<ReqAckPlayerMove>(() => (ReqAckPlayerMove)MessagePool.Instance.Fetch(typeof(ReqAckPlayerMove)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove(ReqAckPlayerMove other) : this() {
      Mover = other.mover_ != null ? other.Mover.Clone() : null;
      moveType_ = other.moveType_;
      speed_ = other.speed_;
      time_ = other.time_;
      lastState_ = other.lastState_;
      targetPos_ = other.targetPos_.Clone();
      sourcePos_ = other.sourcePos_.Clone();
      moveDirection_ = other.moveDirection_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove Clone() {
      return new ReqAckPlayerMove(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int MoverFieldNumber = 1;
    private global::NFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 2;
    private int moveType_;
    /// <summary>
    ///future_state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "lastState" field.</summary>
    public const int LastStateFieldNumber = 5;
    private int lastState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastState {
      get { return lastState_; }
      set {
        lastState_ = value;
      }
    }

    /// <summary>Field number for the "target_pos" field.</summary>
    public const int TargetPosFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_targetPos_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> targetPos_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> TargetPos {
      get { return targetPos_; }
    }

    /// <summary>Field number for the "source_pos" field.</summary>
    public const int SourcePosFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_sourcePos_codec
        = pb::FieldCodec.ForMessage(58, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> sourcePos_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> SourcePos {
      get { return sourcePos_; }
    }

    /// <summary>Field number for the "move_direction" field.</summary>
    public const int MoveDirectionFieldNumber = 8;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_moveDirection_codec
        = pb::FieldCodec.ForMessage(66, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> moveDirection_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> MoveDirection {
      get { return moveDirection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mover, other.Mover)) return false;
      if (MoveType != other.MoveType) return false;
      if (Speed != other.Speed) return false;
      if (Time != other.Time) return false;
      if (LastState != other.LastState) return false;
      if(!targetPos_.Equals(other.targetPos_)) return false;
      if(!sourcePos_.Equals(other.sourcePos_)) return false;
      if(!moveDirection_.Equals(other.moveDirection_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= Mover.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (LastState != 0) hash ^= LastState.GetHashCode();
      hash ^= targetPos_.GetHashCode();
      hash ^= sourcePos_.GetHashCode();
      hash ^= moveDirection_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mover);
      }
      if (MoveType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MoveType);
      }
      if (Speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Speed);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      if (LastState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastState);
      }
      targetPos_.WriteTo(output, _repeated_targetPos_codec);
      sourcePos_.WriteTo(output, _repeated_sourcePos_codec);
      moveDirection_.WriteTo(output, _repeated_moveDirection_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mover);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (LastState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastState);
      }
      size += targetPos_.CalculateSize(_repeated_targetPos_codec);
      size += sourcePos_.CalculateSize(_repeated_sourcePos_codec);
      size += moveDirection_.CalculateSize(_repeated_moveDirection_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mover_ == null) {
              mover_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(mover_);
            break;
          }
          case 16: {
            MoveType = input.ReadInt32();
            break;
          }
          case 29: {
            Speed = input.ReadFloat();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 40: {
            LastState = input.ReadInt32();
            break;
          }
          case 50: {
            targetPos_.AddEntriesFrom(input, _repeated_targetPos_codec);
            break;
          }
          case 58: {
            sourcePos_.AddEntriesFrom(input, _repeated_sourcePos_codec);
            break;
          }
          case 66: {
            moveDirection_.AddEntriesFrom(input, _repeated_moveDirection_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckPlayerChat : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckPlayerChat> _parser = new pb::MessageParser<ReqAckPlayerChat>(() => (ReqAckPlayerChat)MessagePool.Instance.Fetch(typeof(ReqAckPlayerChat)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat(ReqAckPlayerChat other) : this() {
      ChatId = other.chatId_ != null ? other.ChatId.Clone() : null;
      chatType_ = other.chatType_;
      chatInfo_ = other.chatInfo_;
      chatName_ = other.chatName_;
      TargetId = other.targetId_ != null ? other.TargetId.Clone() : null;
      containerData_ = other.containerData_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat Clone() {
      return new ReqAckPlayerChat(this);
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 1;
    private global::NFMsg.Ident chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 2;
    private global::NFMsg.ReqAckPlayerChat.Types.EGameChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckPlayerChat.Types.EGameChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_info" field.</summary>
    public const int ChatInfoFieldNumber = 3;
    private pb::ByteString chatInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatInfo {
      get { return chatInfo_; }
      set {
        chatInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_name" field.</summary>
    public const int ChatNameFieldNumber = 4;
    private pb::ByteString chatName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatName {
      get { return chatName_; }
      set {
        chatName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 5;
    private global::NFMsg.Ident targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "Container_data" field.</summary>
    public const int ContainerDataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer> _repeated_containerData_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.ReqAckPlayerChat.Types.ChatContainer.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer> containerData_ = new pbc::RepeatedField<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer> ContainerData {
      get { return containerData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChatId, other.ChatId)) return false;
      if (ChatType != other.ChatType) return false;
      if (ChatInfo != other.ChatInfo) return false;
      if (ChatName != other.ChatName) return false;
      if (!object.Equals(TargetId, other.TargetId)) return false;
      if(!containerData_.Equals(other.containerData_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chatId_ != null) hash ^= ChatId.GetHashCode();
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (ChatInfo.Length != 0) hash ^= ChatInfo.GetHashCode();
      if (ChatName.Length != 0) hash ^= ChatName.GetHashCode();
      if (targetId_ != null) hash ^= TargetId.GetHashCode();
      hash ^= containerData_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chatId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChatId);
      }
      if (ChatType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ChatInfo);
      }
      if (ChatName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ChatName);
      }
      if (targetId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TargetId);
      }
      containerData_.WriteTo(output, _repeated_containerData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chatId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatId);
      }
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatInfo);
      }
      if (ChatName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatName);
      }
      if (targetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      size += containerData_.CalculateSize(_repeated_containerData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (chatId_ == null) {
              chatId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(chatId_);
            break;
          }
          case 16: {
            chatType_ = (global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) input.ReadEnum();
            break;
          }
          case 26: {
            ChatInfo = input.ReadBytes();
            break;
          }
          case 34: {
            ChatName = input.ReadBytes();
            break;
          }
          case 42: {
            if (targetId_ == null) {
              targetId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(targetId_);
            break;
          }
          case 50: {
            containerData_.AddEntriesFrom(input, _repeated_containerData_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckPlayerChat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameChatType {
        [pbr::OriginalName("EGCT_CLAN")] EgctClan = 0,
        [pbr::OriginalName("EGCT_PRIVATE")] EgctPrivate = 1,
        [pbr::OriginalName("EGCT_TEAM")] EgctTeam = 2,
        [pbr::OriginalName("EGCT_WORLD")] EgctWorld = 3,
      }

      public sealed partial class ChatContainer : pb::IMessage {
        private static readonly pb::MessageParser<ChatContainer> _parser = new pb::MessageParser<ChatContainer>(() => (ChatContainer)MessagePool.Instance.Fetch(typeof(ChatContainer)));
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChatContainer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NFMsg.ReqAckPlayerChat.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatContainer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatContainer(ChatContainer other) : this() {
          conTainerType_ = other.conTainerType_;
          dataInfo_ = other.dataInfo_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatContainer Clone() {
          return new ChatContainer(this);
        }

        /// <summary>Field number for the "ConTainerType" field.</summary>
        public const int ConTainerTypeFieldNumber = 2;
        private int conTainerType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ConTainerType {
          get { return conTainerType_; }
          set {
            conTainerType_ = value;
          }
        }

        /// <summary>Field number for the "data_info" field.</summary>
        public const int DataInfoFieldNumber = 3;
        private pb::ByteString dataInfo_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString DataInfo {
          get { return dataInfo_; }
          set {
            dataInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChatContainer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChatContainer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConTainerType != other.ConTainerType) return false;
          if (DataInfo != other.DataInfo) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConTainerType != 0) hash ^= ConTainerType.GetHashCode();
          if (DataInfo.Length != 0) hash ^= DataInfo.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConTainerType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(ConTainerType);
          }
          if (DataInfo.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(DataInfo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConTainerType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConTainerType);
          }
          if (DataInfo.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataInfo);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 16: {
                ConTainerType = input.ReadInt32();
                break;
              }
              case 26: {
                DataInfo = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ChatContainer message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ContainerType {
            /// <summary>
            /// </summary>
            [pbr::OriginalName("EGCT_UNKNOW")] EgctUnknow = 0,
            /// <summary>
            ///道具
            /// </summary>
            [pbr::OriginalName("EGCT_ITEM")] EgctItem = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class ReqAckPlayerPosSync : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckPlayerPosSync> _parser = new pb::MessageParser<ReqAckPlayerPosSync>(() => (ReqAckPlayerPosSync)MessagePool.Instance.Fetch(typeof(ReqAckPlayerPosSync)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerPosSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync(ReqAckPlayerPosSync other) : this() {
      Mover = other.mover_ != null ? other.Mover.Clone() : null;
      time_ = other.time_;
      interpolationTime_ = other.interpolationTime_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Direction = other.direction_ != null ? other.Direction.Clone() : null;
      status_ = other.status_;
      frame_ = other.frame_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync Clone() {
      return new ReqAckPlayerPosSync(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int MoverFieldNumber = 1;
    private global::NFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "InterpolationTime" field.</summary>
    public const int InterpolationTimeFieldNumber = 3;
    private float interpolationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InterpolationTime {
      get { return interpolationTime_; }
      set {
        interpolationTime_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::NFMsg.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 5;
    private global::NFMsg.Vector3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 7;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerPosSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerPosSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mover, other.Mover)) return false;
      if (Time != other.Time) return false;
      if (InterpolationTime != other.InterpolationTime) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (Status != other.Status) return false;
      if (Frame != other.Frame) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= Mover.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (InterpolationTime != 0F) hash ^= InterpolationTime.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mover);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (InterpolationTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InterpolationTime);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Direction);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Status);
      }
      if (Frame != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mover);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (InterpolationTime != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mover_ == null) {
              mover_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(mover_);
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 29: {
            InterpolationTime = input.ReadFloat();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 42: {
            if (direction_ == null) {
              direction_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 48: {
            Status = input.ReadInt32();
            break;
          }
          case 56: {
            Frame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectData : pb::IMessage {
    private static readonly pb::MessageParser<EffectData> _parser = new pb::MessageParser<EffectData>(() => (EffectData)MessagePool.Instance.Fetch(typeof(EffectData)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData(EffectData other) : this() {
      EffectIdent = other.effectIdent_ != null ? other.EffectIdent.Clone() : null;
      effectValue_ = other.effectValue_;
      effectRlt_ = other.effectRlt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData Clone() {
      return new EffectData(this);
    }

    /// <summary>Field number for the "effect_ident" field.</summary>
    public const int EffectIdentFieldNumber = 1;
    private global::NFMsg.Ident effectIdent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident EffectIdent {
      get { return effectIdent_; }
      set {
        effectIdent_ = value;
      }
    }

    /// <summary>Field number for the "effect_value" field.</summary>
    public const int EffectValueFieldNumber = 2;
    private int effectValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectValue {
      get { return effectValue_; }
      set {
        effectValue_ = value;
      }
    }

    /// <summary>Field number for the "effect_rlt" field.</summary>
    public const int EffectRltFieldNumber = 3;
    private global::NFMsg.EffectData.Types.EResultType effectRlt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EffectData.Types.EResultType EffectRlt {
      get { return effectRlt_; }
      set {
        effectRlt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectIdent, other.EffectIdent)) return false;
      if (EffectValue != other.EffectValue) return false;
      if (EffectRlt != other.EffectRlt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectIdent_ != null) hash ^= EffectIdent.GetHashCode();
      if (EffectValue != 0) hash ^= EffectValue.GetHashCode();
      if (EffectRlt != 0) hash ^= EffectRlt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectIdent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectIdent);
      }
      if (EffectValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EffectValue);
      }
      if (EffectRlt != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EffectRlt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectIdent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectIdent);
      }
      if (EffectValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectValue);
      }
      if (EffectRlt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectRlt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (effectIdent_ == null) {
              effectIdent_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(effectIdent_);
            break;
          }
          case 16: {
            EffectValue = input.ReadInt32();
            break;
          }
          case 24: {
            effectRlt_ = (global::NFMsg.EffectData.Types.EResultType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EffectData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResultType {
        [pbr::OriginalName("EET_FAIL")] EetFail = 0,
        [pbr::OriginalName("EET_SUCCESS")] EetSuccess = 1,
        [pbr::OriginalName("EET_REFUSE")] EetRefuse = 2,
        [pbr::OriginalName("EET_MISS")] EetMiss = 3,
        [pbr::OriginalName("EET_CRIT")] EetCrit = 4,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckUseSkill : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckUseSkill> _parser = new pb::MessageParser<ReqAckUseSkill>(() => (ReqAckUseSkill)MessagePool.Instance.Fetch(typeof(ReqAckUseSkill)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill(ReqAckUseSkill other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      skillId_ = other.skillId_;
      useIndex_ = other.useIndex_;
      effectData_ = other.effectData_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill Clone() {
      return new ReqAckUseSkill(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::NFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private pb::ByteString skillId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_index" field.</summary>
    public const int UseIndexFieldNumber = 3;
    private int useIndex_;
    /// <summary>
    ///因为客户端要先展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseIndex {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int EffectDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::NFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.EffectData> EffectData {
      get { return effectData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (SkillId != other.SkillId) return false;
      if (UseIndex != other.UseIndex) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (SkillId.Length != 0) hash ^= SkillId.GetHashCode();
      if (UseIndex != 0) hash ^= UseIndex.GetHashCode();
      hash ^= effectData_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SkillId);
      }
      if (UseIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UseIndex);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SkillId);
      }
      if (UseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseIndex);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            SkillId = input.ReadBytes();
            break;
          }
          case 24: {
            UseIndex = input.ReadInt32();
            break;
          }
          case 34: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckUseItem : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckUseItem> _parser = new pb::MessageParser<ReqAckUseItem>(() => (ReqAckUseItem)MessagePool.Instance.Fetch(typeof(ReqAckUseItem)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem(ReqAckUseItem other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      ItemGuid = other.itemGuid_ != null ? other.ItemGuid.Clone() : null;
      effectData_ = other.effectData_.Clone();
      Item = other.item_ != null ? other.Item.Clone() : null;
      Targetid = other.targetid_ != null ? other.Targetid.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem Clone() {
      return new ReqAckUseItem(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::NFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int ItemGuidFieldNumber = 2;
    private global::NFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ItemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int EffectDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::NFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.EffectData> EffectData {
      get { return effectData_; }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::NFMsg.ItemStruct item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ItemStruct Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int TargetidFieldNumber = 5;
    private global::NFMsg.Ident targetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::NFMsg.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(ItemGuid, other.ItemGuid)) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Targetid, other.Targetid)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (itemGuid_ != null) hash ^= ItemGuid.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (targetid_ != null) hash ^= Targetid.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemGuid);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (targetid_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Targetid);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemGuid);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (targetid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetid);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            if (itemGuid_ == null) {
              itemGuid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(itemGuid_);
            break;
          }
          case 26: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
          case 34: {
            if (item_ == null) {
              item_ = new global::NFMsg.ItemStruct();
            }
            input.ReadMessage(item_);
            break;
          }
          case 42: {
            if (targetid_ == null) {
              targetid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(targetid_);
            break;
          }
          case 50: {
            if (position_ == null) {
              position_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////////////////////////////
  ///EGMI_REQ_SWAP_SCENE
  /// </summary>
  public sealed partial class ReqAckSwapScene : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckSwapScene> _parser = new pb::MessageParser<ReqAckSwapScene>(() => (ReqAckSwapScene)MessagePool.Instance.Fetch(typeof(ReqAckSwapScene)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSwapScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene(ReqAckSwapScene other) : this() {
      transferType_ = other.transferType_;
      sceneId_ = other.sceneId_;
      lineId_ = other.lineId_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene Clone() {
      return new ReqAckSwapScene(this);
    }

    /// <summary>Field number for the "transfer_type" field.</summary>
    public const int TransferTypeFieldNumber = 1;
    private global::NFMsg.ReqAckSwapScene.Types.EGameSwapType transferType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckSwapScene.Types.EGameSwapType TransferType {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 3;
    private int lineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { return lineId_; }
      set {
        lineId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 6;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSwapScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSwapScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransferType != other.TransferType) return false;
      if (SceneId != other.SceneId) return false;
      if (LineId != other.LineId) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransferType != 0) hash ^= TransferType.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (LineId != 0) hash ^= LineId.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransferType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TransferType);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SceneId);
      }
      if (LineId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineId);
      }
      if (X != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Z);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransferType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransferType);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (LineId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            transferType_ = (global::NFMsg.ReqAckSwapScene.Types.EGameSwapType) input.ReadEnum();
            break;
          }
          case 16: {
            SceneId = input.ReadInt32();
            break;
          }
          case 24: {
            LineId = input.ReadInt32();
            break;
          }
          case 37: {
            X = input.ReadFloat();
            break;
          }
          case 45: {
            Y = input.ReadFloat();
            break;
          }
          case 53: {
            Z = input.ReadFloat();
            break;
          }
          case 58: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSwapScene message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameSwapType {
        /// <summary>
        ///普通城镇传送
        /// </summary>
        [pbr::OriginalName("EGST_NARMAL")] EgstNarmal = 0,
        /// <summary>
        ///普通副本
        /// </summary>
        [pbr::OriginalName("EGST_CLONE")] EgstClone = 1,
        /// <summary>
        ///竞技场
        /// </summary>
        [pbr::OriginalName("EGST_ARENA")] EgstArena = 2,
        /// <summary>
        ///镜像空间
        /// </summary>
        [pbr::OriginalName("EGST_MIRROR")] EgstMirror = 3,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_SWAP_HOME_SCENE
  /// </summary>
  public sealed partial class ReqAckHomeScene : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckHomeScene> _parser = new pb::MessageParser<ReqAckHomeScene>(() => (ReqAckHomeScene)MessagePool.Instance.Fetch(typeof(ReqAckHomeScene)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckHomeScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene(ReqAckHomeScene other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene Clone() {
      return new ReqAckHomeScene(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckHomeScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckHomeScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemStruct : pb::IMessage {
    private static readonly pb::MessageParser<ItemStruct> _parser = new pb::MessageParser<ItemStruct>(() => (ItemStruct)MessagePool.Instance.Fetch(typeof(ItemStruct)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct(ItemStruct other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct Clone() {
      return new ItemStruct(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private pb::ByteString itemId_ = pb::ByteString.Empty;
    /// <summary>
    /// 配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private int itemCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ItemId = input.ReadBytes();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyStruct : pb::IMessage {
    private static readonly pb::MessageParser<CurrencyStruct> _parser = new pb::MessageParser<CurrencyStruct>(() => (CurrencyStruct)MessagePool.Instance.Fetch(typeof(CurrencyStruct)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct(CurrencyStruct other) : this() {
      currencyType_ = other.currencyType_;
      currencyCount_ = other.currencyCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct Clone() {
      return new CurrencyStruct(this);
    }

    /// <summary>Field number for the "currency_type" field.</summary>
    public const int CurrencyTypeFieldNumber = 1;
    private int currencyType_;
    /// <summary>
    /// 金币，钻石，体力等等东西的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrencyType {
      get { return currencyType_; }
      set {
        currencyType_ = value;
      }
    }

    /// <summary>Field number for the "currency_count" field.</summary>
    public const int CurrencyCountFieldNumber = 2;
    private int currencyCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrencyCount {
      get { return currencyCount_; }
      set {
        currencyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyType != other.CurrencyType) return false;
      if (CurrencyCount != other.CurrencyCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyType != 0) hash ^= CurrencyType.GetHashCode();
      if (CurrencyCount != 0) hash ^= CurrencyCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrencyType);
      }
      if (CurrencyCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrencyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyType);
      }
      if (CurrencyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrencyType = input.ReadInt32();
            break;
          }
          case 16: {
            CurrencyCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_START_OPPNENT						= 1220;
  ///EGMI_ACK_START_OPPNENT						= 1221;
  /// </summary>
  public sealed partial class ReqAckStartBattle : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckStartBattle> _parser = new pb::MessageParser<ReqAckStartBattle>(() => (ReqAckStartBattle)MessagePool.Instance.Fetch(typeof(ReqAckStartBattle)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckStartBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckStartBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckStartBattle(ReqAckStartBattle other) : this() {
      gold_ = other.gold_;
      diamond_ = other.diamond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckStartBattle Clone() {
      return new ReqAckStartBattle(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 2;
    private int diamond_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckStartBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckStartBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Diamond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
          case 16: {
            Diamond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_END_OPPNENT
  /// </summary>
  public sealed partial class ReqEndBattle : pb::IMessage {
    private static readonly pb::MessageParser<ReqEndBattle> _parser = new pb::MessageParser<ReqEndBattle>(() => (ReqEndBattle)MessagePool.Instance.Fetch(typeof(ReqEndBattle)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle(ReqEndBattle other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle Clone() {
      return new ReqEndBattle(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_ACK_RELIVE							= 180;			//
  /// </summary>
  public sealed partial class ReqAckRelive : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckRelive> _parser = new pb::MessageParser<ReqAckRelive>(() => (ReqAckRelive)MessagePool.Instance.Fetch(typeof(ReqAckRelive)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckRelive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckRelive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckRelive(ReqAckRelive other) : this() {
      diamond_ = other.diamond_;
      HeroId = other.heroId_ != null ? other.HeroId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckRelive Clone() {
      return new ReqAckRelive(this);
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 1;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private global::NFMsg.Ident heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckRelive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckRelive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Diamond != other.Diamond) return false;
      if (!object.Equals(HeroId, other.HeroId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (heroId_ != null) hash ^= HeroId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Diamond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Diamond);
      }
      if (heroId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (heroId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Diamond = input.ReadInt32();
            break;
          }
          case 18: {
            if (heroId_ == null) {
              heroId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_END_OPPNENT
  /// </summary>
  public sealed partial class AckEndBattle : pb::IMessage {
    private static readonly pb::MessageParser<AckEndBattle> _parser = new pb::MessageParser<AckEndBattle>(() => (AckEndBattle)MessagePool.Instance.Fetch(typeof(AckEndBattle)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle(AckEndBattle other) : this() {
      win_ = other.win_;
      star_ = other.star_;
      gold_ = other.gold_;
      exp_ = other.exp_;
      diamond_ = other.diamond_;
      itemList_ = other.itemList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle Clone() {
      return new AckEndBattle(this);
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 1;
    private int win_;
    /// <summary>
    ///下发的时候则为道具列表
    ///获得的金币等列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private int star_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    /// <summary>
    /// 副本获得的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    /// 副本获得的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 5;
    private int diamond_;
    /// <summary>
    /// 副本获得的zhuanshi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::NFMsg.ItemStruct>();
    /// <summary>
    /// 副本获得的道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ItemStruct> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckEndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckEndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Win != other.Win) return false;
      if (Star != other.Star) return false;
      if (Gold != other.Gold) return false;
      if (Exp != other.Exp) return false;
      if (Diamond != other.Diamond) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      hash ^= itemList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Win != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Win);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Star);
      }
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Diamond != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Diamond);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Win = input.ReadInt32();
            break;
          }
          case 16: {
            Star = input.ReadInt32();
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            Diamond = input.ReadInt32();
            break;
          }
          case 50: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqPickDropItem : pb::IMessage {
    private static readonly pb::MessageParser<ReqPickDropItem> _parser = new pb::MessageParser<ReqPickDropItem>(() => (ReqPickDropItem)MessagePool.Instance.Fetch(typeof(ReqPickDropItem)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPickDropItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem(ReqPickDropItem other) : this() {
      ItemGuid = other.itemGuid_ != null ? other.ItemGuid.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem Clone() {
      return new ReqPickDropItem(this);
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int ItemGuidFieldNumber = 2;
    private global::NFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ItemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqPickDropItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqPickDropItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ItemGuid, other.ItemGuid)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemGuid_ != null) hash ^= ItemGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (itemGuid_ == null) {
              itemGuid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(itemGuid_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAcceptTask : pb::IMessage {
    private static readonly pb::MessageParser<ReqAcceptTask> _parser = new pb::MessageParser<ReqAcceptTask>(() => (ReqAcceptTask)MessagePool.Instance.Fetch(typeof(ReqAcceptTask)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAcceptTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask(ReqAcceptTask other) : this() {
      taskId_ = other.taskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask Clone() {
      return new ReqAcceptTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private pb::ByteString taskId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAcceptTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAcceptTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCompeleteTask : pb::IMessage {
    private static readonly pb::MessageParser<ReqCompeleteTask> _parser = new pb::MessageParser<ReqCompeleteTask>(() => (ReqCompeleteTask)MessagePool.Instance.Fetch(typeof(ReqCompeleteTask)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCompeleteTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask(ReqCompeleteTask other) : this() {
      taskId_ = other.taskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask Clone() {
      return new ReqCompeleteTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private pb::ByteString taskId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCompeleteTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCompeleteTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckJoinActivity : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckJoinActivity> _parser = new pb::MessageParser<ReqAckJoinActivity>(() => (ReqAckJoinActivity)MessagePool.Instance.Fetch(typeof(ReqAckJoinActivity)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinActivity(ReqAckJoinActivity other) : this() {
      activityType_ = other.activityType_;
      subActivityType_ = other.subActivityType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinActivity Clone() {
      return new ReqAckJoinActivity(this);
    }

    /// <summary>Field number for the "activity_type" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private global::NFMsg.ReqAckJoinActivity.Types.EGameActivityType activityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckJoinActivity.Types.EGameActivityType ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "sub_activity_type" field.</summary>
    public const int SubActivityTypeFieldNumber = 2;
    private global::NFMsg.ReqAckJoinActivity.Types.EGameActivitySubType subActivityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckJoinActivity.Types.EGameActivitySubType SubActivityType {
      get { return subActivityType_; }
      set {
        subActivityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityType != other.ActivityType) return false;
      if (SubActivityType != other.SubActivityType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
      if (SubActivityType != 0) hash ^= SubActivityType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActivityType);
      }
      if (SubActivityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SubActivityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
      }
      if (SubActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubActivityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            activityType_ = (global::NFMsg.ReqAckJoinActivity.Types.EGameActivityType) input.ReadEnum();
            break;
          }
          case 16: {
            subActivityType_ = (global::NFMsg.ReqAckJoinActivity.Types.EGameActivitySubType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckJoinActivity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameActivityType {
        /// <summary>
        ///普通PVP对战活动
        /// </summary>
        [pbr::OriginalName("EGAT_PVP")] EgatPvp = 0,
      }

      public enum EGameActivitySubType {
        /// <summary>
        ///普通难度
        /// </summary>
        [pbr::OriginalName("EGAT_NORMAL")] EgatNormal = 0,
      }

    }
    #endregion

  }

  /// <summary>
  ////////////////工会/////////////////////////////////////////////////////////////////////////////////////
  ///EGMI_REQ_CREATE_CLAN                       = 300; // 申请创建公会 EGMI_ACK_CREATE_CLAN						= 301; // 创建公会结果
  /// </summary>
  public sealed partial class ReqAckCreateClan : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckCreateClan> _parser = new pb::MessageParser<ReqAckCreateClan>(() => (ReqAckCreateClan)MessagePool.Instance.Fetch(typeof(ReqAckCreateClan)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan(ReqAckCreateClan other) : this() {
      ClanId = other.clanId_ != null ? other.ClanId.Clone() : null;
      clanName_ = other.clanName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan Clone() {
      return new ReqAckCreateClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int ClanNameFieldNumber = 2;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanName {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (ClanName != other.ClanName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (ClanName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ClanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (ClanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            ClanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_SEARCH_CLAN                       = 308; // 申请搜索公会
  /// </summary>
  public sealed partial class ReqSearchClan : pb::IMessage {
    private static readonly pb::MessageParser<ReqSearchClan> _parser = new pb::MessageParser<ReqSearchClan>(() => (ReqSearchClan)MessagePool.Instance.Fetch(typeof(ReqSearchClan)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan(ReqSearchClan other) : this() {
      clanName_ = other.clanName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan Clone() {
      return new ReqSearchClan(this);
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int ClanNameFieldNumber = 1;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanName {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSearchClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSearchClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClanName != other.ClanName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClanName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ClanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_SEARCH_CLAN                       = 309; // 返回搜索公会
  /// </summary>
  public sealed partial class AckSearchClan : pb::IMessage {
    private static readonly pb::MessageParser<AckSearchClan> _parser = new pb::MessageParser<AckSearchClan>(() => (AckSearchClan)MessagePool.Instance.Fetch(typeof(AckSearchClan)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan(AckSearchClan other) : this() {
      clanList_ = other.clanList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan Clone() {
      return new AckSearchClan(this);
    }

    /// <summary>Field number for the "clan_list" field.</summary>
    public const int ClanListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.AckSearchClan.Types.SearchClanObject> _repeated_clanList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.AckSearchClan.Types.SearchClanObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject> clanList_ = new pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject> ClanList {
      get { return clanList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSearchClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSearchClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!clanList_.Equals(other.clanList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= clanList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clanList_.WriteTo(output, _repeated_clanList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clanList_.CalculateSize(_repeated_clanList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            clanList_.AddEntriesFrom(input, _repeated_clanList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AckSearchClan message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SearchClanObject : pb::IMessage {
        private static readonly pb::MessageParser<SearchClanObject> _parser = new pb::MessageParser<SearchClanObject>(() => (SearchClanObject)MessagePool.Instance.Fetch(typeof(SearchClanObject)));
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchClanObject> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NFMsg.AckSearchClan.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject(SearchClanObject other) : this() {
          ClanID = other.clanID_ != null ? other.ClanID.Clone() : null;
          clanName_ = other.clanName_;
          clanIcon_ = other.clanIcon_;
          clanMemberCount_ = other.clanMemberCount_;
          clanMemberMaxCount_ = other.clanMemberMaxCount_;
          clanHonor_ = other.clanHonor_;
          clanRank_ = other.clanRank_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject Clone() {
          return new SearchClanObject(this);
        }

        /// <summary>Field number for the "clan_ID" field.</summary>
        public const int ClanIDFieldNumber = 1;
        private global::NFMsg.Ident clanID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NFMsg.Ident ClanID {
          get { return clanID_; }
          set {
            clanID_ = value;
          }
        }

        /// <summary>Field number for the "clan_name" field.</summary>
        public const int ClanNameFieldNumber = 2;
        private pb::ByteString clanName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ClanName {
          get { return clanName_; }
          set {
            clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "clan_icon" field.</summary>
        public const int ClanIconFieldNumber = 3;
        private pb::ByteString clanIcon_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ClanIcon {
          get { return clanIcon_; }
          set {
            clanIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "clan_member_count" field.</summary>
        public const int ClanMemberCountFieldNumber = 4;
        private int clanMemberCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanMemberCount {
          get { return clanMemberCount_; }
          set {
            clanMemberCount_ = value;
          }
        }

        /// <summary>Field number for the "clan_member_max_count" field.</summary>
        public const int ClanMemberMaxCountFieldNumber = 5;
        private int clanMemberMaxCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanMemberMaxCount {
          get { return clanMemberMaxCount_; }
          set {
            clanMemberMaxCount_ = value;
          }
        }

        /// <summary>Field number for the "clan_honor" field.</summary>
        public const int ClanHonorFieldNumber = 6;
        private int clanHonor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanHonor {
          get { return clanHonor_; }
          set {
            clanHonor_ = value;
          }
        }

        /// <summary>Field number for the "clan_rank" field.</summary>
        public const int ClanRankFieldNumber = 7;
        private int clanRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanRank {
          get { return clanRank_; }
          set {
            clanRank_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SearchClanObject);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchClanObject other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ClanID, other.ClanID)) return false;
          if (ClanName != other.ClanName) return false;
          if (ClanIcon != other.ClanIcon) return false;
          if (ClanMemberCount != other.ClanMemberCount) return false;
          if (ClanMemberMaxCount != other.ClanMemberMaxCount) return false;
          if (ClanHonor != other.ClanHonor) return false;
          if (ClanRank != other.ClanRank) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (clanID_ != null) hash ^= ClanID.GetHashCode();
          if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
          if (ClanIcon.Length != 0) hash ^= ClanIcon.GetHashCode();
          if (ClanMemberCount != 0) hash ^= ClanMemberCount.GetHashCode();
          if (ClanMemberMaxCount != 0) hash ^= ClanMemberMaxCount.GetHashCode();
          if (ClanHonor != 0) hash ^= ClanHonor.GetHashCode();
          if (ClanRank != 0) hash ^= ClanRank.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (clanID_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ClanID);
          }
          if (ClanName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(ClanName);
          }
          if (ClanIcon.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(ClanIcon);
          }
          if (ClanMemberCount != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ClanMemberCount);
          }
          if (ClanMemberMaxCount != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(ClanMemberMaxCount);
          }
          if (ClanHonor != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ClanHonor);
          }
          if (ClanRank != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ClanRank);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (clanID_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanID);
          }
          if (ClanName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
          }
          if (ClanIcon.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanIcon);
          }
          if (ClanMemberCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanMemberCount);
          }
          if (ClanMemberMaxCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanMemberMaxCount);
          }
          if (ClanHonor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanHonor);
          }
          if (ClanRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanRank);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (clanID_ == null) {
                  clanID_ = new global::NFMsg.Ident();
                }
                input.ReadMessage(clanID_);
                break;
              }
              case 18: {
                ClanName = input.ReadBytes();
                break;
              }
              case 26: {
                ClanIcon = input.ReadBytes();
                break;
              }
              case 32: {
                ClanMemberCount = input.ReadInt32();
                break;
              }
              case 40: {
                ClanMemberMaxCount = input.ReadInt32();
                break;
              }
              case 48: {
                ClanHonor = input.ReadInt32();
                break;
              }
              case 56: {
                ClanRank = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_JOIN_CLAN                         = 302; // 申请加入公会 EGMI_ACK_JOIN_CLAN							= 303; // 加入公会结果
  /// </summary>
  public sealed partial class ReqAckJoinClan : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckJoinClan> _parser = new pb::MessageParser<ReqAckJoinClan>(() => (ReqAckJoinClan)MessagePool.Instance.Fetch(typeof(ReqAckJoinClan)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan(ReqAckJoinClan other) : this() {
      ClanId = other.clanId_ != null ? other.ClanId.Clone() : null;
      clanName_ = other.clanName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan Clone() {
      return new ReqAckJoinClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int ClanNameFieldNumber = 2;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanName {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (ClanName != other.ClanName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (ClanName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ClanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (ClanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            ClanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_LEAVE_CLAN						= 305; // 离开公会结果 
  /// </summary>
  public sealed partial class ReqAckLeaveClan : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckLeaveClan> _parser = new pb::MessageParser<ReqAckLeaveClan>(() => (ReqAckLeaveClan)MessagePool.Instance.Fetch(typeof(ReqAckLeaveClan)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan(ReqAckLeaveClan other) : this() {
      ClanId = other.clanId_ != null ? other.ClanId.Clone() : null;
      clanName_ = other.clanName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan Clone() {
      return new ReqAckLeaveClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int ClanNameFieldNumber = 2;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanName {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (ClanName != other.ClanName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (ClanName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ClanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (ClanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            ClanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作成员 EGMI_REQ_OPR_CLAN                        	= 306; // 申请成员操作 EGMI_ACK_OPR_CLAN                        	= 307; // 成员操作结果
  /// </summary>
  public sealed partial class ReqAckOprClanMember : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckOprClanMember> _parser = new pb::MessageParser<ReqAckOprClanMember>(() => (ReqAckOprClanMember)MessagePool.Instance.Fetch(typeof(ReqAckOprClanMember)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprClanMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember(ReqAckOprClanMember other) : this() {
      ClanId = other.clanId_ != null ? other.ClanId.Clone() : null;
      MemberId = other.memberId_ != null ? other.MemberId.Clone() : null;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember Clone() {
      return new ReqAckOprClanMember(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 2;
    private global::NFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprClanMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprClanMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (!object.Equals(MemberId, other.MemberId)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (memberId_ != null) hash ^= MemberId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (memberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            if (memberId_ == null) {
              memberId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(memberId_);
            break;
          }
          case 24: {
            type_ = (global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprClanMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGClanMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EgatDown = 0,
        [pbr::OriginalName("EGAT_UP")] EgatUp = 1,
        [pbr::OriginalName("EGAT_KICK")] EgatKick = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_ReqEnterClanEctype					= 315; // 
  /// </summary>
  public sealed partial class ReqEnterClanEctype : pb::IMessage {
    private static readonly pb::MessageParser<ReqEnterClanEctype> _parser = new pb::MessageParser<ReqEnterClanEctype>(() => (ReqEnterClanEctype)MessagePool.Instance.Fetch(typeof(ReqEnterClanEctype)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterClanEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype(ReqEnterClanEctype other) : this() {
      ClanId = other.clanId_ != null ? other.ClanId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype Clone() {
      return new ReqEnterClanEctype(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterClanEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterClanEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SET_FIGHT_HERO						= 508;		 // 战斗武将
  /// </summary>
  public sealed partial class ReqSetFightHero : pb::IMessage {
    private static readonly pb::MessageParser<ReqSetFightHero> _parser = new pb::MessageParser<ReqSetFightHero>(() => (ReqSetFightHero)MessagePool.Instance.Fetch(typeof(ReqSetFightHero)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSetFightHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero(ReqSetFightHero other) : this() {
      Heroid = other.heroid_ != null ? other.Heroid.Clone() : null;
      set_ = other.set_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero Clone() {
      return new ReqSetFightHero(this);
    }

    /// <summary>Field number for the "Heroid" field.</summary>
    public const int HeroidFieldNumber = 1;
    private global::NFMsg.Ident heroid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "Set" field.</summary>
    public const int SetFieldNumber = 2;
    private int set_;
    /// <summary>
    ///0,1,2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSetFightHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSetFightHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heroid, other.Heroid)) return false;
      if (Set != other.Set) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroid_ != null) hash ^= Heroid.GetHashCode();
      if (Set != 0) hash ^= Set.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Heroid);
      }
      if (Set != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Set);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroid);
      }
      if (Set != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Set);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (heroid_ == null) {
              heroid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroid_);
            break;
          }
          case 16: {
            Set = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SWITCH_FIGHT_HERO						= 508;		 // 战斗武将
  /// </summary>
  public sealed partial class ReqSwitchFightHero : pb::IMessage {
    private static readonly pb::MessageParser<ReqSwitchFightHero> _parser = new pb::MessageParser<ReqSwitchFightHero>(() => (ReqSwitchFightHero)MessagePool.Instance.Fetch(typeof(ReqSwitchFightHero)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSwitchFightHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero(ReqSwitchFightHero other) : this() {
      Heroid = other.heroid_ != null ? other.Heroid.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero Clone() {
      return new ReqSwitchFightHero(this);
    }

    /// <summary>Field number for the "Heroid" field.</summary>
    public const int HeroidFieldNumber = 1;
    private global::NFMsg.Ident heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSwitchFightHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSwitchFightHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heroid, other.Heroid)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroid_ != null) hash ^= Heroid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Heroid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (heroid_ == null) {
              heroid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_BUY_FORM_SHOP
  /// </summary>
  public sealed partial class ReqBuyItemFromShop : pb::IMessage {
    private static readonly pb::MessageParser<ReqBuyItemFromShop> _parser = new pb::MessageParser<ReqBuyItemFromShop>(() => (ReqBuyItemFromShop)MessagePool.Instance.Fetch(typeof(ReqBuyItemFromShop)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBuyItemFromShop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop(ReqBuyItemFromShop other) : this() {
      itemID_ = other.itemID_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop Clone() {
      return new ReqBuyItemFromShop(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private pb::ByteString itemID_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ItemID {
      get { return itemID_; }
      set {
        itemID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBuyItemFromShop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBuyItemFromShop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID.Length != 0) hash ^= ItemID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ItemID = input.ReadBytes();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_ADD_GAMBLE_VALUE
  /// </summary>
  public sealed partial class ReqAddGambleValue : pb::IMessage {
    private static readonly pb::MessageParser<ReqAddGambleValue> _parser = new pb::MessageParser<ReqAddGambleValue>(() => (ReqAddGambleValue)MessagePool.Instance.Fetch(typeof(ReqAddGambleValue)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAddGambleValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddGambleValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddGambleValue(ReqAddGambleValue other) : this() {
      property_ = other.property_;
      number_ = other.number_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddGambleValue Clone() {
      return new ReqAddGambleValue(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private pb::ByteString property_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAddGambleValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAddGambleValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if (Number != other.Number) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Property);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Property);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Property = input.ReadBytes();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_MINING_TITLE							= 1600;		 // 挖矿
  /// </summary>
  public sealed partial class ReqMiningTitle : pb::IMessage {
    private static readonly pb::MessageParser<ReqMiningTitle> _parser = new pb::MessageParser<ReqMiningTitle>(() => (ReqMiningTitle)MessagePool.Instance.Fetch(typeof(ReqMiningTitle)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMiningTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMiningTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMiningTitle(ReqMiningTitle other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      opr_ = other.opr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMiningTitle Clone() {
      return new ReqMiningTitle(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "opr" field.</summary>
    public const int OprFieldNumber = 3;
    private int opr_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Opr {
      get { return opr_; }
      set {
        opr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMiningTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMiningTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Opr != other.Opr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Opr != 0) hash ^= Opr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Opr != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Opr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Opr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Opr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TileState : pb::IMessage {
    private static readonly pb::MessageParser<TileState> _parser = new pb::MessageParser<TileState>(() => (TileState)MessagePool.Instance.Fetch(typeof(TileState)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileState(TileState other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      opr_ = other.opr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileState Clone() {
      return new TileState(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "opr" field.</summary>
    public const int OprFieldNumber = 3;
    private int opr_;
    /// <summary>
    ///0:rem;1:add
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Opr {
      get { return opr_; }
      set {
        opr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Opr != other.Opr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Opr != 0) hash ^= Opr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Opr != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Opr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Opr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Opr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TileBuilding : pb::IMessage {
    private static readonly pb::MessageParser<TileBuilding> _parser = new pb::MessageParser<TileBuilding>(() => (TileBuilding)MessagePool.Instance.Fetch(typeof(TileBuilding)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileBuilding(TileBuilding other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      configID_ = other.configID_;
      Guid = other.guid_ != null ? other.Guid.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileBuilding Clone() {
      return new TileBuilding(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 3;
    private pb::ByteString configID_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigID {
      get { return configID_; }
      set {
        configID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private global::NFMsg.Ident guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ConfigID != other.ConfigID) return false;
      if (!object.Equals(Guid, other.Guid)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (ConfigID.Length != 0) hash ^= ConfigID.GetHashCode();
      if (guid_ != null) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (ConfigID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ConfigID);
      }
      if (guid_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (ConfigID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigID);
      }
      if (guid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 26: {
            ConfigID = input.ReadBytes();
            break;
          }
          case 34: {
            if (guid_ == null) {
              guid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(guid_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TileNPC : pb::IMessage {
    private static readonly pb::MessageParser<TileNPC> _parser = new pb::MessageParser<TileNPC>(() => (TileNPC)MessagePool.Instance.Fetch(typeof(TileNPC)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileNPC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileNPC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileNPC(TileNPC other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      configID_ = other.configID_;
      Guid = other.guid_ != null ? other.Guid.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileNPC Clone() {
      return new TileNPC(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 3;
    private pb::ByteString configID_ = pb::ByteString.Empty;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigID {
      get { return configID_; }
      set {
        configID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private global::NFMsg.Ident guid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileNPC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileNPC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ConfigID != other.ConfigID) return false;
      if (!object.Equals(Guid, other.Guid)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (ConfigID.Length != 0) hash ^= ConfigID.GetHashCode();
      if (guid_ != null) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (ConfigID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ConfigID);
      }
      if (guid_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (ConfigID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigID);
      }
      if (guid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 26: {
            ConfigID = input.ReadBytes();
            break;
          }
          case 34: {
            if (guid_ == null) {
              guid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(guid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACK_MINING_TITLE
  /// </summary>
  public sealed partial class AckMiningTitle : pb::IMessage {
    private static readonly pb::MessageParser<AckMiningTitle> _parser = new pb::MessageParser<AckMiningTitle>(() => (AckMiningTitle)MessagePool.Instance.Fetch(typeof(AckMiningTitle)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMiningTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMiningTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMiningTitle(AckMiningTitle other) : this() {
      tile_ = other.tile_.Clone();
      building_ = other.building_.Clone();
      npc_ = other.npc_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMiningTitle Clone() {
      return new AckMiningTitle(this);
    }

    /// <summary>Field number for the "tile" field.</summary>
    public const int TileFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.TileState> _repeated_tile_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.TileState.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.TileState> tile_ = new pbc::RepeatedField<global::NFMsg.TileState>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.TileState> Tile {
      get { return tile_; }
    }

    /// <summary>Field number for the "building" field.</summary>
    public const int BuildingFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.TileBuilding> _repeated_building_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.TileBuilding.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.TileBuilding> building_ = new pbc::RepeatedField<global::NFMsg.TileBuilding>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.TileBuilding> Building {
      get { return building_; }
    }

    /// <summary>Field number for the "npc" field.</summary>
    public const int NpcFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.TileNPC> _repeated_npc_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.TileNPC.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.TileNPC> npc_ = new pbc::RepeatedField<global::NFMsg.TileNPC>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.TileNPC> Npc {
      get { return npc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMiningTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMiningTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tile_.Equals(other.tile_)) return false;
      if(!building_.Equals(other.building_)) return false;
      if(!npc_.Equals(other.npc_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tile_.GetHashCode();
      hash ^= building_.GetHashCode();
      hash ^= npc_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tile_.WriteTo(output, _repeated_tile_codec);
      building_.WriteTo(output, _repeated_building_codec);
      npc_.WriteTo(output, _repeated_npc_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tile_.CalculateSize(_repeated_tile_codec);
      size += building_.CalculateSize(_repeated_building_codec);
      size += npc_.CalculateSize(_repeated_npc_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tile_.AddEntriesFrom(input, _repeated_tile_codec);
            break;
          }
          case 18: {
            building_.AddEntriesFrom(input, _repeated_building_codec);
            break;
          }
          case 26: {
            npc_.AddEntriesFrom(input, _repeated_npc_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_SEARCH_OPPNENT
  /// </summary>
  public sealed partial class ReqSearchOppnent : pb::IMessage {
    private static readonly pb::MessageParser<ReqSearchOppnent> _parser = new pb::MessageParser<ReqSearchOppnent>(() => (ReqSearchOppnent)MessagePool.Instance.Fetch(typeof(ReqSearchOppnent)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent(ReqSearchOppnent other) : this() {
      selfScene_ = other.selfScene_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent Clone() {
      return new ReqSearchOppnent(this);
    }

    /// <summary>Field number for the "self_scene" field.</summary>
    public const int SelfSceneFieldNumber = 1;
    private int selfScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfScene {
      get { return selfScene_; }
      set {
        selfScene_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSearchOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSearchOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelfScene != other.SelfScene) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelfScene != 0) hash ^= SelfScene.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SelfScene != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SelfScene);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelfScene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfScene);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SelfScene = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_SEARCH_OPPNENT
  /// </summary>
  public sealed partial class AckSearchOppnent : pb::IMessage {
    private static readonly pb::MessageParser<AckSearchOppnent> _parser = new pb::MessageParser<AckSearchOppnent>(() => (AckSearchOppnent)MessagePool.Instance.Fetch(typeof(AckSearchOppnent)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent(AckSearchOppnent other) : this() {
      sceneId_ = other.sceneId_;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      level_ = other.level_;
      cup_ = other.cup_;
      name_ = other.name_;
      head_ = other.head_;
      heroCnf1_ = other.heroCnf1_;
      heroStar1_ = other.heroStar1_;
      heroCnf2_ = other.heroCnf2_;
      heroStar2_ = other.heroStar2_;
      heroCnf3_ = other.heroCnf3_;
      heroStar3_ = other.heroStar3_;
      HeroId1 = other.heroId1_ != null ? other.HeroId1.Clone() : null;
      HeroId2 = other.heroId2_ != null ? other.HeroId2.Clone() : null;
      HeroId3 = other.heroId3_ != null ? other.HeroId3.Clone() : null;
      HeroPos1 = other.heroPos1_ != null ? other.HeroPos1.Clone() : null;
      HeroPos2 = other.heroPos2_ != null ? other.HeroPos2.Clone() : null;
      HeroPos3 = other.heroPos3_ != null ? other.HeroPos3.Clone() : null;
      Title = other.title_ != null ? other.Title.Clone() : null;
      Opponent = other.opponent_ != null ? other.Opponent.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent Clone() {
      return new AckSearchOppnent(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 3;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "cup" field.</summary>
    public const int CupFieldNumber = 5;
    private int cup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cup {
      get { return cup_; }
      set {
        cup_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 7;
    private pb::ByteString head_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_cnf1" field.</summary>
    public const int HeroCnf1FieldNumber = 8;
    private pb::ByteString heroCnf1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HeroCnf1 {
      get { return heroCnf1_; }
      set {
        heroCnf1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_star1" field.</summary>
    public const int HeroStar1FieldNumber = 9;
    private int heroStar1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar1 {
      get { return heroStar1_; }
      set {
        heroStar1_ = value;
      }
    }

    /// <summary>Field number for the "hero_cnf2" field.</summary>
    public const int HeroCnf2FieldNumber = 10;
    private pb::ByteString heroCnf2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HeroCnf2 {
      get { return heroCnf2_; }
      set {
        heroCnf2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_star2" field.</summary>
    public const int HeroStar2FieldNumber = 11;
    private int heroStar2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar2 {
      get { return heroStar2_; }
      set {
        heroStar2_ = value;
      }
    }

    /// <summary>Field number for the "hero_cnf3" field.</summary>
    public const int HeroCnf3FieldNumber = 12;
    private pb::ByteString heroCnf3_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HeroCnf3 {
      get { return heroCnf3_; }
      set {
        heroCnf3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_star3" field.</summary>
    public const int HeroStar3FieldNumber = 13;
    private int heroStar3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar3 {
      get { return heroStar3_; }
      set {
        heroStar3_ = value;
      }
    }

    /// <summary>Field number for the "hero_id1" field.</summary>
    public const int HeroId1FieldNumber = 20;
    private global::NFMsg.Ident heroId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId1 {
      get { return heroId1_; }
      set {
        heroId1_ = value;
      }
    }

    /// <summary>Field number for the "hero_id2" field.</summary>
    public const int HeroId2FieldNumber = 21;
    private global::NFMsg.Ident heroId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId2 {
      get { return heroId2_; }
      set {
        heroId2_ = value;
      }
    }

    /// <summary>Field number for the "hero_id3" field.</summary>
    public const int HeroId3FieldNumber = 22;
    private global::NFMsg.Ident heroId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId3 {
      get { return heroId3_; }
      set {
        heroId3_ = value;
      }
    }

    /// <summary>Field number for the "hero_pos1" field.</summary>
    public const int HeroPos1FieldNumber = 23;
    private global::NFMsg.Vector3 heroPos1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 HeroPos1 {
      get { return heroPos1_; }
      set {
        heroPos1_ = value;
      }
    }

    /// <summary>Field number for the "hero_pos2" field.</summary>
    public const int HeroPos2FieldNumber = 24;
    private global::NFMsg.Vector3 heroPos2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 HeroPos2 {
      get { return heroPos2_; }
      set {
        heroPos2_ = value;
      }
    }

    /// <summary>Field number for the "hero_pos3" field.</summary>
    public const int HeroPos3FieldNumber = 25;
    private global::NFMsg.Vector3 heroPos3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 HeroPos3 {
      get { return heroPos3_; }
      set {
        heroPos3_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 30;
    private global::NFMsg.AckMiningTitle title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.AckMiningTitle Title {
      get { return title_; }
      set {
        title_ = value;
      }
    }

    /// <summary>Field number for the "opponent" field.</summary>
    public const int OpponentFieldNumber = 31;
    private global::NFMsg.Ident opponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Opponent {
      get { return opponent_; }
      set {
        opponent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSearchOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSearchOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      if (Level != other.Level) return false;
      if (Cup != other.Cup) return false;
      if (Name != other.Name) return false;
      if (Head != other.Head) return false;
      if (HeroCnf1 != other.HeroCnf1) return false;
      if (HeroStar1 != other.HeroStar1) return false;
      if (HeroCnf2 != other.HeroCnf2) return false;
      if (HeroStar2 != other.HeroStar2) return false;
      if (HeroCnf3 != other.HeroCnf3) return false;
      if (HeroStar3 != other.HeroStar3) return false;
      if (!object.Equals(HeroId1, other.HeroId1)) return false;
      if (!object.Equals(HeroId2, other.HeroId2)) return false;
      if (!object.Equals(HeroId3, other.HeroId3)) return false;
      if (!object.Equals(HeroPos1, other.HeroPos1)) return false;
      if (!object.Equals(HeroPos2, other.HeroPos2)) return false;
      if (!object.Equals(HeroPos3, other.HeroPos3)) return false;
      if (!object.Equals(Title, other.Title)) return false;
      if (!object.Equals(Opponent, other.Opponent)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Cup != 0) hash ^= Cup.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Head.Length != 0) hash ^= Head.GetHashCode();
      if (HeroCnf1.Length != 0) hash ^= HeroCnf1.GetHashCode();
      if (HeroStar1 != 0) hash ^= HeroStar1.GetHashCode();
      if (HeroCnf2.Length != 0) hash ^= HeroCnf2.GetHashCode();
      if (HeroStar2 != 0) hash ^= HeroStar2.GetHashCode();
      if (HeroCnf3.Length != 0) hash ^= HeroCnf3.GetHashCode();
      if (HeroStar3 != 0) hash ^= HeroStar3.GetHashCode();
      if (heroId1_ != null) hash ^= HeroId1.GetHashCode();
      if (heroId2_ != null) hash ^= HeroId2.GetHashCode();
      if (heroId3_ != null) hash ^= HeroId3.GetHashCode();
      if (heroPos1_ != null) hash ^= HeroPos1.GetHashCode();
      if (heroPos2_ != null) hash ^= HeroPos2.GetHashCode();
      if (heroPos3_ != null) hash ^= HeroPos3.GetHashCode();
      if (title_ != null) hash ^= Title.GetHashCode();
      if (opponent_ != null) hash ^= Opponent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Diamond);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Cup != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Cup);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Name);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Head);
      }
      if (HeroCnf1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(HeroCnf1);
      }
      if (HeroStar1 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HeroStar1);
      }
      if (HeroCnf2.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(HeroCnf2);
      }
      if (HeroStar2 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HeroStar2);
      }
      if (HeroCnf3.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(HeroCnf3);
      }
      if (HeroStar3 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HeroStar3);
      }
      if (heroId1_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(HeroId1);
      }
      if (heroId2_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(HeroId2);
      }
      if (heroId3_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(HeroId3);
      }
      if (heroPos1_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(HeroPos1);
      }
      if (heroPos2_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(HeroPos2);
      }
      if (heroPos3_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(HeroPos3);
      }
      if (title_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Title);
      }
      if (opponent_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Opponent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Cup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cup);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Head);
      }
      if (HeroCnf1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HeroCnf1);
      }
      if (HeroStar1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroStar1);
      }
      if (HeroCnf2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HeroCnf2);
      }
      if (HeroStar2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroStar2);
      }
      if (HeroCnf3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HeroCnf3);
      }
      if (HeroStar3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroStar3);
      }
      if (heroId1_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroId1);
      }
      if (heroId2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroId2);
      }
      if (heroId3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroId3);
      }
      if (heroPos1_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroPos1);
      }
      if (heroPos2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroPos2);
      }
      if (heroPos3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroPos3);
      }
      if (title_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Title);
      }
      if (opponent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Opponent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
          case 24: {
            Diamond = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Cup = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadBytes();
            break;
          }
          case 58: {
            Head = input.ReadBytes();
            break;
          }
          case 66: {
            HeroCnf1 = input.ReadBytes();
            break;
          }
          case 72: {
            HeroStar1 = input.ReadInt32();
            break;
          }
          case 82: {
            HeroCnf2 = input.ReadBytes();
            break;
          }
          case 88: {
            HeroStar2 = input.ReadInt32();
            break;
          }
          case 98: {
            HeroCnf3 = input.ReadBytes();
            break;
          }
          case 104: {
            HeroStar3 = input.ReadInt32();
            break;
          }
          case 162: {
            if (heroId1_ == null) {
              heroId1_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId1_);
            break;
          }
          case 170: {
            if (heroId2_ == null) {
              heroId2_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId2_);
            break;
          }
          case 178: {
            if (heroId3_ == null) {
              heroId3_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId3_);
            break;
          }
          case 186: {
            if (heroPos1_ == null) {
              heroPos1_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(heroPos1_);
            break;
          }
          case 194: {
            if (heroPos2_ == null) {
              heroPos2_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(heroPos2_);
            break;
          }
          case 202: {
            if (heroPos3_ == null) {
              heroPos3_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(heroPos3_);
            break;
          }
          case 242: {
            if (title_ == null) {
              title_ = new global::NFMsg.AckMiningTitle();
            }
            input.ReadMessage(title_);
            break;
          }
          case 250: {
            if (opponent_ == null) {
              opponent_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(opponent_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SEND_MAIL = 700; // 发送邮件
  /// </summary>
  public sealed partial class ReqSendMail : pb::IMessage {
    private static readonly pb::MessageParser<ReqSendMail> _parser = new pb::MessageParser<ReqSendMail>(() => (ReqSendMail)MessagePool.Instance.Fetch(typeof(ReqSendMail)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSendMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail(ReqSendMail other) : this() {
      Reciever = other.reciever_ != null ? other.Reciever.Clone() : null;
      itemList_ = other.itemList_.Clone();
      currencyList_ = other.currencyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail Clone() {
      return new ReqSendMail(this);
    }

    /// <summary>Field number for the "reciever" field.</summary>
    public const int RecieverFieldNumber = 1;
    private global::NFMsg.Ident reciever_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Reciever {
      get { return reciever_; }
      set {
        reciever_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::NFMsg.ItemStruct>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ItemStruct> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "currency_list" field.</summary>
    public const int CurrencyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.CurrencyStruct> _repeated_currencyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.CurrencyStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.CurrencyStruct> currencyList_ = new pbc::RepeatedField<global::NFMsg.CurrencyStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.CurrencyStruct> CurrencyList {
      get { return currencyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSendMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSendMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reciever, other.Reciever)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!currencyList_.Equals(other.currencyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reciever_ != null) hash ^= Reciever.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= currencyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reciever_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reciever);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      currencyList_.WriteTo(output, _repeated_currencyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reciever_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reciever);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += currencyList_.CalculateSize(_repeated_currencyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reciever_ == null) {
              reciever_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(reciever_);
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 26: {
            currencyList_.AddEntriesFrom(input, _repeated_currencyList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQSWICHSERVER							= 210;		 // 申请转服
  /// </summary>
  public sealed partial class ReqSwitchServer : pb::IMessage {
    private static readonly pb::MessageParser<ReqSwitchServer> _parser = new pb::MessageParser<ReqSwitchServer>(() => (ReqSwitchServer)MessagePool.Instance.Fetch(typeof(ReqSwitchServer)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer(ReqSwitchServer other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
      sceneID_ = other.sceneID_;
      ClientId = other.clientId_ != null ? other.ClientId.Clone() : null;
      groupID_ = other.groupID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer Clone() {
      return new ReqSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int SelfServeridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 本来所在的服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfServerid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int TargetServeridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetServerid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int GateServeridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GateServerid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 5;
    private long sceneID_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 6;
    private global::NFMsg.Ident clientId_;
    /// <summary>
    /// 客户端id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClientId {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 7;
    private long groupID_;
    /// <summary>
    ///  group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (SelfServerid != other.SelfServerid) return false;
      if (TargetServerid != other.TargetServerid) return false;
      if (GateServerid != other.GateServerid) return false;
      if (SceneID != other.SceneID) return false;
      if (!object.Equals(ClientId, other.ClientId)) return false;
      if (GroupID != other.GroupID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (SelfServerid != 0L) hash ^= SelfServerid.GetHashCode();
      if (TargetServerid != 0L) hash ^= TargetServerid.GetHashCode();
      if (GateServerid != 0L) hash ^= GateServerid.GetHashCode();
      if (SceneID != 0L) hash ^= SceneID.GetHashCode();
      if (clientId_ != null) hash ^= ClientId.GetHashCode();
      if (GroupID != 0L) hash ^= GroupID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (SelfServerid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SelfServerid);
      }
      if (TargetServerid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetServerid);
      }
      if (GateServerid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GateServerid);
      }
      if (SceneID != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SceneID);
      }
      if (clientId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ClientId);
      }
      if (GroupID != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(GroupID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (SelfServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfServerid);
      }
      if (TargetServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetServerid);
      }
      if (GateServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateServerid);
      }
      if (SceneID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneID);
      }
      if (clientId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientId);
      }
      if (GroupID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 16: {
            SelfServerid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetServerid = input.ReadInt64();
            break;
          }
          case 32: {
            GateServerid = input.ReadInt64();
            break;
          }
          case 40: {
            SceneID = input.ReadInt64();
            break;
          }
          case 50: {
            if (clientId_ == null) {
              clientId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clientId_);
            break;
          }
          case 56: {
            GroupID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACKSWICHSERVER							= 211;		 // 申请转服
  /// </summary>
  public sealed partial class AckSwitchServer : pb::IMessage {
    private static readonly pb::MessageParser<AckSwitchServer> _parser = new pb::MessageParser<AckSwitchServer>(() => (AckSwitchServer)MessagePool.Instance.Fetch(typeof(AckSwitchServer)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer(AckSwitchServer other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer Clone() {
      return new AckSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int SelfServeridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfServerid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int TargetServeridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetServerid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int GateServeridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GateServerid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (SelfServerid != other.SelfServerid) return false;
      if (TargetServerid != other.TargetServerid) return false;
      if (GateServerid != other.GateServerid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (SelfServerid != 0L) hash ^= SelfServerid.GetHashCode();
      if (TargetServerid != 0L) hash ^= TargetServerid.GetHashCode();
      if (GateServerid != 0L) hash ^= GateServerid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (SelfServerid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SelfServerid);
      }
      if (TargetServerid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetServerid);
      }
      if (GateServerid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GateServerid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (SelfServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfServerid);
      }
      if (TargetServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetServerid);
      }
      if (GateServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateServerid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 16: {
            SelfServerid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetServerid = input.ReadInt64();
            break;
          }
          case 32: {
            GateServerid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////////////pvp--///////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class PVPRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<PVPRoomInfo> _parser = new pb::MessageParser<PVPRoomInfo>(() => (PVPRoomInfo)MessagePool.Instance.Fetch(typeof(PVPRoomInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PVPRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPRoomInfo(PVPRoomInfo other) : this() {
      nCellStatus_ = other.nCellStatus_;
      RoomID = other.roomID_ != null ? other.RoomID.Clone() : null;
      nPVPMode_ = other.nPVPMode_;
      nPVPGrade_ = other.nPVPGrade_;
      maxPalyer_ = other.maxPalyer_;
      xRedPlayer_ = other.xRedPlayer_.Clone();
      xBluePlayer_ = other.xBluePlayer_.Clone();
      serverid_ = other.serverid_;
      sceneID_ = other.sceneID_;
      groupID_ = other.groupID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPRoomInfo Clone() {
      return new PVPRoomInfo(this);
    }

    /// <summary>Field number for the "nCellStatus" field.</summary>
    public const int NCellStatusFieldNumber = 1;
    private int nCellStatus_;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCellStatus {
      get { return nCellStatus_; }
      set {
        nCellStatus_ = value;
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private global::NFMsg.Ident roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "nPVPMode" field.</summary>
    public const int NPVPModeFieldNumber = 3;
    private int nPVPMode_;
    /// <summary>
    /// 匹配模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPVPMode {
      get { return nPVPMode_; }
      set {
        nPVPMode_ = value;
      }
    }

    /// <summary>Field number for the "nPVPGrade" field.</summary>
    public const int NPVPGradeFieldNumber = 4;
    private int nPVPGrade_;
    /// <summary>
    /// 房间所在的阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPVPGrade {
      get { return nPVPGrade_; }
      set {
        nPVPGrade_ = value;
      }
    }

    /// <summary>Field number for the "MaxPalyer" field.</summary>
    public const int MaxPalyerFieldNumber = 5;
    private int maxPalyer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPalyer {
      get { return maxPalyer_; }
      set {
        maxPalyer_ = value;
      }
    }

    /// <summary>Field number for the "xRedPlayer" field.</summary>
    public const int XRedPlayerFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_xRedPlayer_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> xRedPlayer_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> XRedPlayer {
      get { return xRedPlayer_; }
    }

    /// <summary>Field number for the "xBluePlayer" field.</summary>
    public const int XBluePlayerFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_xBluePlayer_codec
        = pb::FieldCodec.ForMessage(58, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> xBluePlayer_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> XBluePlayer {
      get { return xBluePlayer_; }
    }

    /// <summary>Field number for the "serverid" field.</summary>
    public const int ServeridFieldNumber = 8;
    private long serverid_;
    /// <summary>
    /// 房间副本所在的serverid	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Serverid {
      get { return serverid_; }
      set {
        serverid_ = value;
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 9;
    private long sceneID_;
    /// <summary>
    /// 房间副本所在的场景id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 10;
    private long groupID_;
    /// <summary>
    /// 房间副本所在的层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PVPRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PVPRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCellStatus != other.NCellStatus) return false;
      if (!object.Equals(RoomID, other.RoomID)) return false;
      if (NPVPMode != other.NPVPMode) return false;
      if (NPVPGrade != other.NPVPGrade) return false;
      if (MaxPalyer != other.MaxPalyer) return false;
      if(!xRedPlayer_.Equals(other.xRedPlayer_)) return false;
      if(!xBluePlayer_.Equals(other.xBluePlayer_)) return false;
      if (Serverid != other.Serverid) return false;
      if (SceneID != other.SceneID) return false;
      if (GroupID != other.GroupID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCellStatus != 0) hash ^= NCellStatus.GetHashCode();
      if (roomID_ != null) hash ^= RoomID.GetHashCode();
      if (NPVPMode != 0) hash ^= NPVPMode.GetHashCode();
      if (NPVPGrade != 0) hash ^= NPVPGrade.GetHashCode();
      if (MaxPalyer != 0) hash ^= MaxPalyer.GetHashCode();
      hash ^= xRedPlayer_.GetHashCode();
      hash ^= xBluePlayer_.GetHashCode();
      if (Serverid != 0L) hash ^= Serverid.GetHashCode();
      if (SceneID != 0L) hash ^= SceneID.GetHashCode();
      if (GroupID != 0L) hash ^= GroupID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCellStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCellStatus);
      }
      if (roomID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomID);
      }
      if (NPVPMode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NPVPMode);
      }
      if (NPVPGrade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NPVPGrade);
      }
      if (MaxPalyer != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxPalyer);
      }
      xRedPlayer_.WriteTo(output, _repeated_xRedPlayer_codec);
      xBluePlayer_.WriteTo(output, _repeated_xBluePlayer_codec);
      if (Serverid != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Serverid);
      }
      if (SceneID != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(SceneID);
      }
      if (GroupID != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(GroupID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCellStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCellStatus);
      }
      if (roomID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomID);
      }
      if (NPVPMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPVPMode);
      }
      if (NPVPGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPVPGrade);
      }
      if (MaxPalyer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPalyer);
      }
      size += xRedPlayer_.CalculateSize(_repeated_xRedPlayer_codec);
      size += xBluePlayer_.CalculateSize(_repeated_xBluePlayer_codec);
      if (Serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Serverid);
      }
      if (SceneID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneID);
      }
      if (GroupID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NCellStatus = input.ReadInt32();
            break;
          }
          case 18: {
            if (roomID_ == null) {
              roomID_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(roomID_);
            break;
          }
          case 24: {
            NPVPMode = input.ReadInt32();
            break;
          }
          case 32: {
            NPVPGrade = input.ReadInt32();
            break;
          }
          case 40: {
            MaxPalyer = input.ReadInt32();
            break;
          }
          case 50: {
            xRedPlayer_.AddEntriesFrom(input, _repeated_xRedPlayer_codec);
            break;
          }
          case 58: {
            xBluePlayer_.AddEntriesFrom(input, _repeated_xBluePlayer_codec);
            break;
          }
          case 64: {
            Serverid = input.ReadInt64();
            break;
          }
          case 72: {
            SceneID = input.ReadInt64();
            break;
          }
          case 80: {
            GroupID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_PVPAPPLYMACTCH						= 1100; 	// 申请匹配pvp
  /// </summary>
  public sealed partial class ReqPVPApplyMatch : pb::IMessage {
    private static readonly pb::MessageParser<ReqPVPApplyMatch> _parser = new pb::MessageParser<ReqPVPApplyMatch>(() => (ReqPVPApplyMatch)MessagePool.Instance.Fetch(typeof(ReqPVPApplyMatch)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPVPApplyMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPVPApplyMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPVPApplyMatch(ReqPVPApplyMatch other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      nPVPMode_ = other.nPVPMode_;
      score_ = other.score_;
      applyType_ = other.applyType_;
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPVPApplyMatch Clone() {
      return new ReqPVPApplyMatch(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nPVPMode" field.</summary>
    public const int NPVPModeFieldNumber = 2;
    private int nPVPMode_;
    /// <summary>
    /// 匹配模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPVPMode {
      get { return nPVPMode_; }
      set {
        nPVPMode_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private long score_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "ApplyType" field.</summary>
    public const int ApplyTypeFieldNumber = 4;
    private int applyType_;
    /// <summary>
    /// 匹配方式，队伍申请还是个人申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyType {
      get { return applyType_; }
      set {
        applyType_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 5;
    private global::NFMsg.Ident teamId_;
    /// <summary>
    /// 队伍ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqPVPApplyMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqPVPApplyMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (NPVPMode != other.NPVPMode) return false;
      if (Score != other.Score) return false;
      if (ApplyType != other.ApplyType) return false;
      if (!object.Equals(TeamId, other.TeamId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (NPVPMode != 0) hash ^= NPVPMode.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (ApplyType != 0) hash ^= ApplyType.GetHashCode();
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (NPVPMode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NPVPMode);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      if (ApplyType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApplyType);
      }
      if (teamId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TeamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (NPVPMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPVPMode);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (ApplyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyType);
      }
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 16: {
            NPVPMode = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 32: {
            ApplyType = input.ReadInt32();
            break;
          }
          case 42: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqPVPApplyMatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EApplyType {
        /// <summary>
        /// 个人匹配
        /// </summary>
        [pbr::OriginalName("EApplyType_Single")] Single = 0,
        /// <summary>
        /// 队伍匹配
        /// </summary>
        [pbr::OriginalName("EApplyType_Team")] Team = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_ACK_PVPAPPLYMACTCH						= 1101; 	// 返回匹配pvp
  /// </summary>
  public sealed partial class AckPVPApplyMatch : pb::IMessage {
    private static readonly pb::MessageParser<AckPVPApplyMatch> _parser = new pb::MessageParser<AckPVPApplyMatch>(() => (AckPVPApplyMatch)MessagePool.Instance.Fetch(typeof(AckPVPApplyMatch)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPVPApplyMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPVPApplyMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPVPApplyMatch(AckPVPApplyMatch other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      XRoomInfo = other.xRoomInfo_ != null ? other.XRoomInfo.Clone() : null;
      applyType_ = other.applyType_;
      nResult_ = other.nResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPVPApplyMatch Clone() {
      return new AckPVPApplyMatch(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "xRoomInfo" field.</summary>
    public const int XRoomInfoFieldNumber = 2;
    private global::NFMsg.PVPRoomInfo xRoomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.PVPRoomInfo XRoomInfo {
      get { return xRoomInfo_; }
      set {
        xRoomInfo_ = value;
      }
    }

    /// <summary>Field number for the "ApplyType" field.</summary>
    public const int ApplyTypeFieldNumber = 3;
    private int applyType_;
    /// <summary>
    /// 匹配方式，队伍申请还是个人申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyType {
      get { return applyType_; }
      set {
        applyType_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int NResultFieldNumber = 4;
    private int nResult_;
    /// <summary>
    /// 匹配的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPVPApplyMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPVPApplyMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(XRoomInfo, other.XRoomInfo)) return false;
      if (ApplyType != other.ApplyType) return false;
      if (NResult != other.NResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (xRoomInfo_ != null) hash ^= XRoomInfo.GetHashCode();
      if (ApplyType != 0) hash ^= ApplyType.GetHashCode();
      if (NResult != 0) hash ^= NResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (xRoomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XRoomInfo);
      }
      if (ApplyType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyType);
      }
      if (NResult != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (xRoomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XRoomInfo);
      }
      if (ApplyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyType);
      }
      if (NResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 18: {
            if (xRoomInfo_ == null) {
              xRoomInfo_ = new global::NFMsg.PVPRoomInfo();
            }
            input.ReadMessage(xRoomInfo_);
            break;
          }
          case 24: {
            ApplyType = input.ReadInt32();
            break;
          }
          case 32: {
            NResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CREATEPVPECTYPE					= 1102; 	// 申请pvp副本
  /// </summary>
  public sealed partial class ReqCreatePVPEctype : pb::IMessage {
    private static readonly pb::MessageParser<ReqCreatePVPEctype> _parser = new pb::MessageParser<ReqCreatePVPEctype>(() => (ReqCreatePVPEctype)MessagePool.Instance.Fetch(typeof(ReqCreatePVPEctype)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCreatePVPEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreatePVPEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreatePVPEctype(ReqCreatePVPEctype other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      XRoomInfo = other.xRoomInfo_ != null ? other.XRoomInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreatePVPEctype Clone() {
      return new ReqCreatePVPEctype(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "xRoomInfo" field.</summary>
    public const int XRoomInfoFieldNumber = 2;
    private global::NFMsg.PVPRoomInfo xRoomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.PVPRoomInfo XRoomInfo {
      get { return xRoomInfo_; }
      set {
        xRoomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCreatePVPEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCreatePVPEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(XRoomInfo, other.XRoomInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (xRoomInfo_ != null) hash ^= XRoomInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (xRoomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XRoomInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (xRoomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XRoomInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 18: {
            if (xRoomInfo_ == null) {
              xRoomInfo_ = new global::NFMsg.PVPRoomInfo();
            }
            input.ReadMessage(xRoomInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_CREATEPVPECTYPE					= 1103; 	// 返回pvp副本的信息，并拉人
  /// </summary>
  public sealed partial class AckCreatePVPEctype : pb::IMessage {
    private static readonly pb::MessageParser<AckCreatePVPEctype> _parser = new pb::MessageParser<AckCreatePVPEctype>(() => (AckCreatePVPEctype)MessagePool.Instance.Fetch(typeof(AckCreatePVPEctype)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckCreatePVPEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCreatePVPEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCreatePVPEctype(AckCreatePVPEctype other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      XRoomInfo = other.xRoomInfo_ != null ? other.XRoomInfo.Clone() : null;
      applyType_ = other.applyType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCreatePVPEctype Clone() {
      return new AckCreatePVPEctype(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "xRoomInfo" field.</summary>
    public const int XRoomInfoFieldNumber = 2;
    private global::NFMsg.PVPRoomInfo xRoomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.PVPRoomInfo XRoomInfo {
      get { return xRoomInfo_; }
      set {
        xRoomInfo_ = value;
      }
    }

    /// <summary>Field number for the "ApplyType" field.</summary>
    public const int ApplyTypeFieldNumber = 3;
    private int applyType_;
    /// <summary>
    /// 匹配方式，队伍申请还是个人申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyType {
      get { return applyType_; }
      set {
        applyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckCreatePVPEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckCreatePVPEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(XRoomInfo, other.XRoomInfo)) return false;
      if (ApplyType != other.ApplyType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (xRoomInfo_ != null) hash ^= XRoomInfo.GetHashCode();
      if (ApplyType != 0) hash ^= ApplyType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (xRoomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XRoomInfo);
      }
      if (ApplyType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (xRoomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XRoomInfo);
      }
      if (ApplyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 18: {
            if (xRoomInfo_ == null) {
              xRoomInfo_ = new global::NFMsg.PVPRoomInfo();
            }
            input.ReadMessage(xRoomInfo_);
            break;
          }
          case 24: {
            ApplyType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

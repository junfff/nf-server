// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgBase.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgBase.proto</summary>
  public static partial class NFMsgBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgBase.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9ORk1zZ0Jhc2UucHJvdG8SBU5GTXNnGg5ORkRlZmluZS5wcm90byIlCgVJ",
            "ZGVudBINCgVzdnJpZBgBIAEoAxINCgVpbmRleBgCIAEoAyIfCgdWZWN0b3Iy",
            "EgkKAXgYASABKAISCQoBeRgCIAEoAiIqCgdWZWN0b3IzEgkKAXgYASABKAIS",
            "CQoBeRgCIAEoAhIJCgF6GAMgASgCIjIKC1Byb3BlcnR5SW50EhUKDXByb3Bl",
            "cnR5X25hbWUYASABKAwSDAoEZGF0YRgCIAEoAyI0Cg1Qcm9wZXJ0eUZsb2F0",
            "EhUKDXByb3BlcnR5X25hbWUYASABKAwSDAoEZGF0YRgCIAEoAiI1Cg5Qcm9w",
            "ZXJ0eVN0cmluZxIVCg1wcm9wZXJ0eV9uYW1lGAEgASgMEgwKBGRhdGEYAiAB",
            "KAwiQwoOUHJvcGVydHlPYmplY3QSFQoNcHJvcGVydHlfbmFtZRgBIAEoDBIa",
            "CgRkYXRhGAIgASgLMgwuTkZNc2cuSWRlbnQiRgoPUHJvcGVydHlWZWN0b3Iy",
            "EhUKDXByb3BlcnR5X25hbWUYASABKAwSHAoEZGF0YRgCIAEoCzIOLk5GTXNn",
            "LlZlY3RvcjIiRgoPUHJvcGVydHlWZWN0b3IzEhUKDXByb3BlcnR5X25hbWUY",
            "ASABKAwSHAoEZGF0YRgCIAEoCzIOLk5GTXNnLlZlY3RvcjMiMwoJUmVjb3Jk",
            "SW50EgsKA3JvdxgBIAEoBRILCgNjb2wYAiABKAUSDAoEZGF0YRgDIAEoAyI1",
            "CgtSZWNvcmRGbG9hdBILCgNyb3cYASABKAUSCwoDY29sGAIgASgFEgwKBGRh",
            "dGEYAyABKAIiNgoMUmVjb3JkU3RyaW5nEgsKA3JvdxgBIAEoBRILCgNjb2wY",
            "AiABKAUSDAoEZGF0YRgDIAEoDCJECgxSZWNvcmRPYmplY3QSCwoDcm93GAEg",
            "ASgFEgsKA2NvbBgCIAEoBRIaCgRkYXRhGAMgASgLMgwuTkZNc2cuSWRlbnQi",
            "RwoNUmVjb3JkVmVjdG9yMhILCgNyb3cYASABKAUSCwoDY29sGAIgASgFEhwK",
            "BGRhdGEYAyABKAsyDi5ORk1zZy5WZWN0b3IyIkcKDVJlY29yZFZlY3RvcjMS",
            "CwoDcm93GAEgASgFEgsKA2NvbBgCIAEoBRIcCgRkYXRhGAMgASgLMg4uTkZN",
            "c2cuVmVjdG9yMyLDAgoSUmVjb3JkQWRkUm93U3RydWN0EgsKA3JvdxgBIAEo",
            "BRIpCg9yZWNvcmRfaW50X2xpc3QYAiADKAsyEC5ORk1zZy5SZWNvcmRJbnQS",
            "LQoRcmVjb3JkX2Zsb2F0X2xpc3QYAyADKAsyEi5ORk1zZy5SZWNvcmRGbG9h",
            "dBIvChJyZWNvcmRfc3RyaW5nX2xpc3QYBCADKAsyEy5ORk1zZy5SZWNvcmRT",
            "dHJpbmcSLwoScmVjb3JkX29iamVjdF9saXN0GAUgAygLMhMuTkZNc2cuUmVj",
            "b3JkT2JqZWN0EjEKE3JlY29yZF92ZWN0b3IyX2xpc3QYBiADKAsyFC5ORk1z",
            "Zy5SZWNvcmRWZWN0b3IyEjEKE3JlY29yZF92ZWN0b3IzX2xpc3QYByADKAsy",
            "FC5ORk1zZy5SZWNvcmRWZWN0b3IzIlYKEE9iamVjdFJlY29yZEJhc2USEwoL",
            "cmVjb3JkX25hbWUYASABKAwSLQoKcm93X3N0cnVjdBgCIAMoCzIZLk5GTXNn",
            "LlJlY29yZEFkZFJvd1N0cnVjdCJvChFPYmplY3RQcm9wZXJ0eUludBIOCgVS",
            "cGNJZBjSASABKAUSHwoJcGxheWVyX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQS",
            "KQoNcHJvcGVydHlfbGlzdBgCIAMoCzISLk5GTXNnLlByb3BlcnR5SW50ImMK",
            "E09iamVjdFByb3BlcnR5RmxvYXQSHwoJcGxheWVyX2lkGAEgASgLMgwuTkZN",
            "c2cuSWRlbnQSKwoNcHJvcGVydHlfbGlzdBgCIAMoCzIULk5GTXNnLlByb3Bl",
            "cnR5RmxvYXQiZQoUT2JqZWN0UHJvcGVydHlTdHJpbmcSHwoJcGxheWVyX2lk",
            "GAEgASgLMgwuTkZNc2cuSWRlbnQSLAoNcHJvcGVydHlfbGlzdBgCIAMoCzIV",
            "Lk5GTXNnLlByb3BlcnR5U3RyaW5nImUKFE9iamVjdFByb3BlcnR5T2JqZWN0",
            "Eh8KCXBsYXllcl9pZBgBIAEoCzIMLk5GTXNnLklkZW50EiwKDXByb3BlcnR5",
            "X2xpc3QYAiADKAsyFS5ORk1zZy5Qcm9wZXJ0eU9iamVjdCJnChVPYmplY3RQ",
            "cm9wZXJ0eVZlY3RvcjISHwoJcGxheWVyX2lkGAEgASgLMgwuTkZNc2cuSWRl",
            "bnQSLQoNcHJvcGVydHlfbGlzdBgCIAMoCzIWLk5GTXNnLlByb3BlcnR5VmVj",
            "dG9yMiJnChVPYmplY3RQcm9wZXJ0eVZlY3RvcjMSHwoJcGxheWVyX2lkGAEg",
            "ASgLMgwuTkZNc2cuSWRlbnQSLQoNcHJvcGVydHlfbGlzdBgCIAMoCzIWLk5G",
            "TXNnLlByb3BlcnR5VmVjdG9yMyJwCg9PYmplY3RSZWNvcmRJbnQSHwoJcGxh",
            "eWVyX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSEwoLcmVjb3JkX25hbWUYAiAB",
            "KAwSJwoNcHJvcGVydHlfbGlzdBgDIAMoCzIQLk5GTXNnLlJlY29yZEludCJ0",
            "ChFPYmplY3RSZWNvcmRGbG9hdBIfCglwbGF5ZXJfaWQYASABKAsyDC5ORk1z",
            "Zy5JZGVudBITCgtyZWNvcmRfbmFtZRgCIAEoDBIpCg1wcm9wZXJ0eV9saXN0",
            "GAMgAygLMhIuTkZNc2cuUmVjb3JkRmxvYXQidgoST2JqZWN0UmVjb3JkU3Ry",
            "aW5nEh8KCXBsYXllcl9pZBgBIAEoCzIMLk5GTXNnLklkZW50EhMKC3JlY29y",
            "ZF9uYW1lGAIgASgMEioKDXByb3BlcnR5X2xpc3QYAyADKAsyEy5ORk1zZy5S",
            "ZWNvcmRTdHJpbmcidgoST2JqZWN0UmVjb3JkT2JqZWN0Eh8KCXBsYXllcl9p",
            "ZBgBIAEoCzIMLk5GTXNnLklkZW50EhMKC3JlY29yZF9uYW1lGAIgASgMEioK",
            "DXByb3BlcnR5X2xpc3QYAyADKAsyEy5ORk1zZy5SZWNvcmRPYmplY3QieAoT",
            "T2JqZWN0UmVjb3JkVmVjdG9yMhIfCglwbGF5ZXJfaWQYASABKAsyDC5ORk1z",
            "Zy5JZGVudBITCgtyZWNvcmRfbmFtZRgCIAEoDBIrCg1wcm9wZXJ0eV9saXN0",
            "GAMgAygLMhQuTkZNc2cuUmVjb3JkVmVjdG9yMiJ4ChNPYmplY3RSZWNvcmRW",
            "ZWN0b3IzEh8KCXBsYXllcl9pZBgBIAEoCzIMLk5GTXNnLklkZW50EhMKC3Jl",
            "Y29yZF9uYW1lGAIgASgMEisKDXByb3BlcnR5X2xpc3QYAyADKAsyFC5ORk1z",
            "Zy5SZWNvcmRWZWN0b3IzIpMBChBPYmplY3RSZWNvcmRTd2FwEh8KCXBsYXll",
            "cl9pZBgBIAEoCzIMLk5GTXNnLklkZW50EhoKEm9yaWdpbl9yZWNvcmRfbmFt",
            "ZRgCIAEoDBIaChJ0YXJnZXRfcmVjb3JkX25hbWUYAyABKAwSEgoKcm93X29y",
            "aWdpbhgEIAEoBRISCgpyb3dfdGFyZ2V0GAUgASgFIncKEk9iamVjdFJlY29y",
            "ZEFkZFJvdxIfCglwbGF5ZXJfaWQYASABKAsyDC5ORk1zZy5JZGVudBITCgty",
            "ZWNvcmRfbmFtZRgCIAEoDBIrCghyb3dfZGF0YRgDIAMoCzIZLk5GTXNnLlJl",
            "Y29yZEFkZFJvd1N0cnVjdCJeChJPYmplY3RSZWNvcmRSZW1vdmUSHwoJcGxh",
            "eWVyX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSEwoLcmVjb3JkX25hbWUYAiAB",
            "KAwSEgoKcmVtb3ZlX3JvdxgDIAMoBSLvAgoST2JqZWN0UHJvcGVydHlMaXN0",
            "Eh8KCXBsYXllcl9pZBgBIAEoCzIMLk5GTXNnLklkZW50Ei0KEXByb3BlcnR5",
            "X2ludF9saXN0GAIgAygLMhIuTkZNc2cuUHJvcGVydHlJbnQSMQoTcHJvcGVy",
            "dHlfZmxvYXRfbGlzdBgDIAMoCzIULk5GTXNnLlByb3BlcnR5RmxvYXQSMwoU",
            "cHJvcGVydHlfc3RyaW5nX2xpc3QYBCADKAsyFS5ORk1zZy5Qcm9wZXJ0eVN0",
            "cmluZxIzChRwcm9wZXJ0eV9vYmplY3RfbGlzdBgFIAMoCzIVLk5GTXNnLlBy",
            "b3BlcnR5T2JqZWN0EjUKFXByb3BlcnR5X3ZlY3RvcjJfbGlzdBgGIAMoCzIW",
            "Lk5GTXNnLlByb3BlcnR5VmVjdG9yMhI1ChVwcm9wZXJ0eV92ZWN0b3IzX2xp",
            "c3QYByADKAsyFi5ORk1zZy5Qcm9wZXJ0eVZlY3RvcjMiYwoXTXVsdGlPYmpl",
            "Y3RQcm9wZXJ0eUxpc3QSDgoFUnBjSWQYygEgASgFEjgKFW11bHRpX3BsYXll",
            "cl9wcm9wZXJ0eRgBIAMoCzIZLk5GTXNnLk9iamVjdFByb3BlcnR5TGlzdCJh",
            "ChBPYmplY3RSZWNvcmRMaXN0Eh8KCXBsYXllcl9pZBgBIAEoCzIMLk5GTXNn",
            "LklkZW50EiwKC3JlY29yZF9saXN0GAIgAygLMhcuTkZNc2cuT2JqZWN0UmVj",
            "b3JkQmFzZSJdChVNdWx0aU9iamVjdFJlY29yZExpc3QSDgoFUnBjSWQYywEg",
            "ASgFEjQKE211bHRpX3BsYXllcl9yZWNvcmQYASADKAsyFy5ORk1zZy5PYmpl",
            "Y3RSZWNvcmRMaXN0Il4KB01zZ0Jhc2USHwoJcGxheWVyX2lkGAEgASgLMgwu",
            "TkZNc2cuSWRlbnQSEAoIbXNnX2RhdGEYAiABKAwSIAoKaGFzaF9pZGVudBgD",
            "IAEoCzIMLk5GTXNnLklkZW50IosDCgpSZXFDb21tYW5kEiAKCmNvbnRyb2xf",
            "aWQYASABKAsyDC5ORk1zZy5JZGVudBI2Cgpjb21tYW5kX2lkGAIgASgOMiIu",
            "TkZNc2cuUmVxQ29tbWFuZC5FR2FtZUNvbW1hbmRUeXBlEhkKEWNvbW1hbmRf",
            "c3RyX3ZhbHVlGAMgASgMEhkKEWNvbW1hbmRfdmFsdWVfaW50GAQgASgDEhsK",
            "E2NvbW1hbmRfdmFsdWVfZmxvYXQYBSABKAESGQoRY29tbWFuZF92YWx1ZV9z",
            "dHIYBiABKAwSKgoUY29tbWFuZF92YWx1ZV9vYmplY3QYByABKAsyDC5ORk1z",
            "Zy5JZGVudBILCgNyb3cYCCABKAUSCwoDY29sGAkgASgFIm8KEEVHYW1lQ29t",
            "bWFuZFR5cGUSFwoTRUdDVF9NT0RJWV9QUk9QRVJUWRAAEhMKD0VHQ1RfTU9E",
            "SVlfSVRFTRABEhYKEkVHQ1RfQ1JFQVRFX09CSkVDVBACEhUKEUVHQ1RfQURE",
            "X1JPTEVfRVhQEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.Ident), global::NFMsg.Ident.Parser, new[]{ "Svrid", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.Vector2), global::NFMsg.Vector2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.Vector3), global::NFMsg.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PropertyInt), global::NFMsg.PropertyInt.Parser, new[]{ "PropertyName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PropertyFloat), global::NFMsg.PropertyFloat.Parser, new[]{ "PropertyName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PropertyString), global::NFMsg.PropertyString.Parser, new[]{ "PropertyName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PropertyObject), global::NFMsg.PropertyObject.Parser, new[]{ "PropertyName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PropertyVector2), global::NFMsg.PropertyVector2.Parser, new[]{ "PropertyName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PropertyVector3), global::NFMsg.PropertyVector3.Parser, new[]{ "PropertyName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RecordInt), global::NFMsg.RecordInt.Parser, new[]{ "Row", "Col", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RecordFloat), global::NFMsg.RecordFloat.Parser, new[]{ "Row", "Col", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RecordString), global::NFMsg.RecordString.Parser, new[]{ "Row", "Col", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RecordObject), global::NFMsg.RecordObject.Parser, new[]{ "Row", "Col", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RecordVector2), global::NFMsg.RecordVector2.Parser, new[]{ "Row", "Col", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RecordVector3), global::NFMsg.RecordVector3.Parser, new[]{ "Row", "Col", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RecordAddRowStruct), global::NFMsg.RecordAddRowStruct.Parser, new[]{ "Row", "RecordIntList", "RecordFloatList", "RecordStringList", "RecordObjectList", "RecordVector2List", "RecordVector3List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordBase), global::NFMsg.ObjectRecordBase.Parser, new[]{ "RecordName", "RowStruct" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectPropertyInt), global::NFMsg.ObjectPropertyInt.Parser, new[]{ "RpcId", "PlayerId", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectPropertyFloat), global::NFMsg.ObjectPropertyFloat.Parser, new[]{ "PlayerId", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectPropertyString), global::NFMsg.ObjectPropertyString.Parser, new[]{ "PlayerId", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectPropertyObject), global::NFMsg.ObjectPropertyObject.Parser, new[]{ "PlayerId", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectPropertyVector2), global::NFMsg.ObjectPropertyVector2.Parser, new[]{ "PlayerId", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectPropertyVector3), global::NFMsg.ObjectPropertyVector3.Parser, new[]{ "PlayerId", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordInt), global::NFMsg.ObjectRecordInt.Parser, new[]{ "PlayerId", "RecordName", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordFloat), global::NFMsg.ObjectRecordFloat.Parser, new[]{ "PlayerId", "RecordName", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordString), global::NFMsg.ObjectRecordString.Parser, new[]{ "PlayerId", "RecordName", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordObject), global::NFMsg.ObjectRecordObject.Parser, new[]{ "PlayerId", "RecordName", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordVector2), global::NFMsg.ObjectRecordVector2.Parser, new[]{ "PlayerId", "RecordName", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordVector3), global::NFMsg.ObjectRecordVector3.Parser, new[]{ "PlayerId", "RecordName", "PropertyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordSwap), global::NFMsg.ObjectRecordSwap.Parser, new[]{ "PlayerId", "OriginRecordName", "TargetRecordName", "RowOrigin", "RowTarget" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordAddRow), global::NFMsg.ObjectRecordAddRow.Parser, new[]{ "PlayerId", "RecordName", "RowData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordRemove), global::NFMsg.ObjectRecordRemove.Parser, new[]{ "PlayerId", "RecordName", "RemoveRow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectPropertyList), global::NFMsg.ObjectPropertyList.Parser, new[]{ "PlayerId", "PropertyIntList", "PropertyFloatList", "PropertyStringList", "PropertyObjectList", "PropertyVector2List", "PropertyVector3List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.MultiObjectPropertyList), global::NFMsg.MultiObjectPropertyList.Parser, new[]{ "RpcId", "MultiPlayerProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ObjectRecordList), global::NFMsg.ObjectRecordList.Parser, new[]{ "PlayerId", "RecordList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.MultiObjectRecordList), global::NFMsg.MultiObjectRecordList.Parser, new[]{ "RpcId", "MultiPlayerRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.MsgBase), global::NFMsg.MsgBase.Parser, new[]{ "PlayerId", "MsgData", "HashIdent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqCommand), global::NFMsg.ReqCommand.Parser, new[]{ "ControlId", "CommandId", "CommandStrValue", "CommandValueInt", "CommandValueFloat", "CommandValueStr", "CommandValueObject", "Row", "Col" }, null, new[]{ typeof(global::NFMsg.ReqCommand.Types.EGameCommandType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ident : pb::IMessage {
    private static readonly pb::MessageParser<Ident> _parser = new pb::MessageParser<Ident>(() => (Ident)MessagePool.Instance.Fetch(typeof(Ident)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ident> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ident() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ident(Ident other) : this() {
      svrid_ = other.svrid_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ident Clone() {
      return new Ident(this);
    }

    /// <summary>Field number for the "svrid" field.</summary>
    public const int SvridFieldNumber = 1;
    private long svrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Svrid {
      get { return svrid_; }
      set {
        svrid_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private long index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ident);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ident other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Svrid != other.Svrid) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Svrid != 0L) hash ^= Svrid.GetHashCode();
      if (Index != 0L) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Svrid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Svrid);
      }
      if (Index != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Svrid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Svrid);
      }
      if (Index != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Svrid = input.ReadInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector2 : pb::IMessage {
    private static readonly pb::MessageParser<Vector2> _parser = new pb::MessageParser<Vector2>(() => (Vector2)MessagePool.Instance.Fetch(typeof(Vector2)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2(Vector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2 Clone() {
      return new Vector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3 : pb::IMessage {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => (Vector3)MessagePool.Instance.Fetch(typeof(Vector3)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////BaseCommon/////////////////////////////
  /// </summary>
  public sealed partial class PropertyInt : pb::IMessage {
    private static readonly pb::MessageParser<PropertyInt> _parser = new pb::MessageParser<PropertyInt>(() => (PropertyInt)MessagePool.Instance.Fetch(typeof(PropertyInt)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyInt(PropertyInt other) : this() {
      propertyName_ = other.propertyName_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyInt Clone() {
      return new PropertyInt(this);
    }

    /// <summary>Field number for the "property_name" field.</summary>
    public const int PropertyNameFieldNumber = 1;
    private pb::ByteString propertyName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private long data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyName != other.PropertyName) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (Data != 0L) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PropertyName);
      }
      if (Data != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyName);
      }
      if (Data != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PropertyName = input.ReadBytes();
            break;
          }
          case 16: {
            Data = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropertyFloat : pb::IMessage {
    private static readonly pb::MessageParser<PropertyFloat> _parser = new pb::MessageParser<PropertyFloat>(() => (PropertyFloat)MessagePool.Instance.Fetch(typeof(PropertyFloat)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyFloat(PropertyFloat other) : this() {
      propertyName_ = other.propertyName_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyFloat Clone() {
      return new PropertyFloat(this);
    }

    /// <summary>Field number for the "property_name" field.</summary>
    public const int PropertyNameFieldNumber = 1;
    private pb::ByteString propertyName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private float data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyName != other.PropertyName) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (Data != 0F) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PropertyName);
      }
      if (Data != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyName);
      }
      if (Data != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PropertyName = input.ReadBytes();
            break;
          }
          case 21: {
            Data = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropertyString : pb::IMessage {
    private static readonly pb::MessageParser<PropertyString> _parser = new pb::MessageParser<PropertyString>(() => (PropertyString)MessagePool.Instance.Fetch(typeof(PropertyString)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyString(PropertyString other) : this() {
      propertyName_ = other.propertyName_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyString Clone() {
      return new PropertyString(this);
    }

    /// <summary>Field number for the "property_name" field.</summary>
    public const int PropertyNameFieldNumber = 1;
    private pb::ByteString propertyName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyName != other.PropertyName) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PropertyName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PropertyName = input.ReadBytes();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropertyObject : pb::IMessage {
    private static readonly pb::MessageParser<PropertyObject> _parser = new pb::MessageParser<PropertyObject>(() => (PropertyObject)MessagePool.Instance.Fetch(typeof(PropertyObject)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyObject(PropertyObject other) : this() {
      propertyName_ = other.propertyName_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyObject Clone() {
      return new PropertyObject(this);
    }

    /// <summary>Field number for the "property_name" field.</summary>
    public const int PropertyNameFieldNumber = 1;
    private pb::ByteString propertyName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::NFMsg.Ident data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyName != other.PropertyName) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PropertyName);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyName);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PropertyName = input.ReadBytes();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropertyVector2 : pb::IMessage {
    private static readonly pb::MessageParser<PropertyVector2> _parser = new pb::MessageParser<PropertyVector2>(() => (PropertyVector2)MessagePool.Instance.Fetch(typeof(PropertyVector2)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyVector2(PropertyVector2 other) : this() {
      propertyName_ = other.propertyName_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyVector2 Clone() {
      return new PropertyVector2(this);
    }

    /// <summary>Field number for the "property_name" field.</summary>
    public const int PropertyNameFieldNumber = 1;
    private pb::ByteString propertyName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::NFMsg.Vector2 data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector2 Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyName != other.PropertyName) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PropertyName);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyName);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PropertyName = input.ReadBytes();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::NFMsg.Vector2();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropertyVector3 : pb::IMessage {
    private static readonly pb::MessageParser<PropertyVector3> _parser = new pb::MessageParser<PropertyVector3>(() => (PropertyVector3)MessagePool.Instance.Fetch(typeof(PropertyVector3)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyVector3(PropertyVector3 other) : this() {
      propertyName_ = other.propertyName_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyVector3 Clone() {
      return new PropertyVector3(this);
    }

    /// <summary>Field number for the "property_name" field.</summary>
    public const int PropertyNameFieldNumber = 1;
    private pb::ByteString propertyName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::NFMsg.Vector3 data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyName != other.PropertyName) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PropertyName);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertyName);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PropertyName = input.ReadBytes();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordInt : pb::IMessage {
    private static readonly pb::MessageParser<RecordInt> _parser = new pb::MessageParser<RecordInt>(() => (RecordInt)MessagePool.Instance.Fetch(typeof(RecordInt)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordInt(RecordInt other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordInt Clone() {
      return new RecordInt(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private long data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      if (Data != 0L) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
      if (Data != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (Data != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
          case 24: {
            Data = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordFloat : pb::IMessage {
    private static readonly pb::MessageParser<RecordFloat> _parser = new pb::MessageParser<RecordFloat>(() => (RecordFloat)MessagePool.Instance.Fetch(typeof(RecordFloat)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFloat(RecordFloat other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFloat Clone() {
      return new RecordFloat(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private float data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      if (Data != 0F) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
      if (Data != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (Data != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
          case 29: {
            Data = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordString : pb::IMessage {
    private static readonly pb::MessageParser<RecordString> _parser = new pb::MessageParser<RecordString>(() => (RecordString)MessagePool.Instance.Fetch(typeof(RecordString)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordString(RecordString other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordString Clone() {
      return new RecordString(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordObject : pb::IMessage {
    private static readonly pb::MessageParser<RecordObject> _parser = new pb::MessageParser<RecordObject>(() => (RecordObject)MessagePool.Instance.Fetch(typeof(RecordObject)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordObject(RecordObject other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordObject Clone() {
      return new RecordObject(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::NFMsg.Ident data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordVector2 : pb::IMessage {
    private static readonly pb::MessageParser<RecordVector2> _parser = new pb::MessageParser<RecordVector2>(() => (RecordVector2)MessagePool.Instance.Fetch(typeof(RecordVector2)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordVector2(RecordVector2 other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordVector2 Clone() {
      return new RecordVector2(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::NFMsg.Vector2 data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector2 Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::NFMsg.Vector2();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordVector3 : pb::IMessage {
    private static readonly pb::MessageParser<RecordVector3> _parser = new pb::MessageParser<RecordVector3>(() => (RecordVector3)MessagePool.Instance.Fetch(typeof(RecordVector3)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordVector3(RecordVector3 other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordVector3 Clone() {
      return new RecordVector3(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::NFMsg.Vector3 data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordAddRowStruct : pb::IMessage {
    private static readonly pb::MessageParser<RecordAddRowStruct> _parser = new pb::MessageParser<RecordAddRowStruct>(() => (RecordAddRowStruct)MessagePool.Instance.Fetch(typeof(RecordAddRowStruct)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordAddRowStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordAddRowStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordAddRowStruct(RecordAddRowStruct other) : this() {
      row_ = other.row_;
      recordIntList_ = other.recordIntList_.Clone();
      recordFloatList_ = other.recordFloatList_.Clone();
      recordStringList_ = other.recordStringList_.Clone();
      recordObjectList_ = other.recordObjectList_.Clone();
      recordVector2List_ = other.recordVector2List_.Clone();
      recordVector3List_ = other.recordVector3List_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordAddRowStruct Clone() {
      return new RecordAddRowStruct(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "record_int_list" field.</summary>
    public const int RecordIntListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.RecordInt> _repeated_recordIntList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.RecordInt.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordInt> recordIntList_ = new pbc::RepeatedField<global::NFMsg.RecordInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordInt> RecordIntList {
      get { return recordIntList_; }
    }

    /// <summary>Field number for the "record_float_list" field.</summary>
    public const int RecordFloatListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordFloat> _repeated_recordFloatList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordFloat.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordFloat> recordFloatList_ = new pbc::RepeatedField<global::NFMsg.RecordFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordFloat> RecordFloatList {
      get { return recordFloatList_; }
    }

    /// <summary>Field number for the "record_string_list" field.</summary>
    public const int RecordStringListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.RecordString> _repeated_recordStringList_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.RecordString.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordString> recordStringList_ = new pbc::RepeatedField<global::NFMsg.RecordString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordString> RecordStringList {
      get { return recordStringList_; }
    }

    /// <summary>Field number for the "record_object_list" field.</summary>
    public const int RecordObjectListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NFMsg.RecordObject> _repeated_recordObjectList_codec
        = pb::FieldCodec.ForMessage(42, global::NFMsg.RecordObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordObject> recordObjectList_ = new pbc::RepeatedField<global::NFMsg.RecordObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordObject> RecordObjectList {
      get { return recordObjectList_; }
    }

    /// <summary>Field number for the "record_vector2_list" field.</summary>
    public const int RecordVector2ListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.RecordVector2> _repeated_recordVector2List_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.RecordVector2.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordVector2> recordVector2List_ = new pbc::RepeatedField<global::NFMsg.RecordVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordVector2> RecordVector2List {
      get { return recordVector2List_; }
    }

    /// <summary>Field number for the "record_vector3_list" field.</summary>
    public const int RecordVector3ListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NFMsg.RecordVector3> _repeated_recordVector3List_codec
        = pb::FieldCodec.ForMessage(58, global::NFMsg.RecordVector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordVector3> recordVector3List_ = new pbc::RepeatedField<global::NFMsg.RecordVector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordVector3> RecordVector3List {
      get { return recordVector3List_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordAddRowStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordAddRowStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if(!recordIntList_.Equals(other.recordIntList_)) return false;
      if(!recordFloatList_.Equals(other.recordFloatList_)) return false;
      if(!recordStringList_.Equals(other.recordStringList_)) return false;
      if(!recordObjectList_.Equals(other.recordObjectList_)) return false;
      if(!recordVector2List_.Equals(other.recordVector2List_)) return false;
      if(!recordVector3List_.Equals(other.recordVector3List_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      hash ^= recordIntList_.GetHashCode();
      hash ^= recordFloatList_.GetHashCode();
      hash ^= recordStringList_.GetHashCode();
      hash ^= recordObjectList_.GetHashCode();
      hash ^= recordVector2List_.GetHashCode();
      hash ^= recordVector3List_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      recordIntList_.WriteTo(output, _repeated_recordIntList_codec);
      recordFloatList_.WriteTo(output, _repeated_recordFloatList_codec);
      recordStringList_.WriteTo(output, _repeated_recordStringList_codec);
      recordObjectList_.WriteTo(output, _repeated_recordObjectList_codec);
      recordVector2List_.WriteTo(output, _repeated_recordVector2List_codec);
      recordVector3List_.WriteTo(output, _repeated_recordVector3List_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      size += recordIntList_.CalculateSize(_repeated_recordIntList_codec);
      size += recordFloatList_.CalculateSize(_repeated_recordFloatList_codec);
      size += recordStringList_.CalculateSize(_repeated_recordStringList_codec);
      size += recordObjectList_.CalculateSize(_repeated_recordObjectList_codec);
      size += recordVector2List_.CalculateSize(_repeated_recordVector2List_codec);
      size += recordVector3List_.CalculateSize(_repeated_recordVector3List_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 18: {
            recordIntList_.AddEntriesFrom(input, _repeated_recordIntList_codec);
            break;
          }
          case 26: {
            recordFloatList_.AddEntriesFrom(input, _repeated_recordFloatList_codec);
            break;
          }
          case 34: {
            recordStringList_.AddEntriesFrom(input, _repeated_recordStringList_codec);
            break;
          }
          case 42: {
            recordObjectList_.AddEntriesFrom(input, _repeated_recordObjectList_codec);
            break;
          }
          case 50: {
            recordVector2List_.AddEntriesFrom(input, _repeated_recordVector2List_codec);
            break;
          }
          case 58: {
            recordVector3List_.AddEntriesFrom(input, _repeated_recordVector3List_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordBase : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordBase> _parser = new pb::MessageParser<ObjectRecordBase>(() => (ObjectRecordBase)MessagePool.Instance.Fetch(typeof(ObjectRecordBase)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordBase(ObjectRecordBase other) : this() {
      recordName_ = other.recordName_;
      rowStruct_ = other.rowStruct_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordBase Clone() {
      return new ObjectRecordBase(this);
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 1;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_struct" field.</summary>
    public const int RowStructFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.RecordAddRowStruct> _repeated_rowStruct_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.RecordAddRowStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordAddRowStruct> rowStruct_ = new pbc::RepeatedField<global::NFMsg.RecordAddRowStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordAddRowStruct> RowStruct {
      get { return rowStruct_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordName != other.RecordName) return false;
      if(!rowStruct_.Equals(other.rowStruct_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= rowStruct_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordName);
      }
      rowStruct_.WriteTo(output, _repeated_rowStruct_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += rowStruct_.CalculateSize(_repeated_rowStruct_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RecordName = input.ReadBytes();
            break;
          }
          case 18: {
            rowStruct_.AddEntriesFrom(input, _repeated_rowStruct_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectPropertyInt : pb::IMessage , GameNet.INetMessage {
    //-------------------------------GameNet.INetMessage START------------------------------ 
     public uint InstanceID { get; set; } 
     public object Context{ get; set; } 
     public GameNet.MsgAdapterType msgAdapterType{ get; set; } 
     public GameNet.PackageType packageType{ get { return GameNet.PackageType.PKG_DATA; } } 
     public void WriteToStream(System.IO.Stream output) 
     { 
      		// Encoding.UTF8.GetBytes(JsonObject.ToString()); 
     		pb::ProtoPreconditions.CheckNotNull(output, "output"); 
     		pb::CodedOutputStream codedOutput = new pb::CodedOutputStream(output); 
     		WriteTo(codedOutput); 
     		codedOutput.Flush(); 
     } 
     public object ParseFrom(byte[] bytes, int offset, int length) 
     { 
     		pb::ProtoPreconditions.CheckNotNull(bytes,"data");  
    		pb::CodedInputStream input = new pb::CodedInputStream(bytes,offset,length);  
    		MergeFrom(input);  
    		return this;  
    } 
     //-------------------------------RpcId ------------------------------ 
     		public int RpcIdNumber { get { return RpcIdArray[0]; } } 
     	   public int[] RpcIdArray => new int[] { 
    210 }; 
    //-------------------------------GameNet.INetMessage END------------------------------ 
     	   
    private static readonly pb::MessageParser<ObjectPropertyInt> _parser = new pb::MessageParser<ObjectPropertyInt>(() => (ObjectPropertyInt)MessagePool.Instance.Fetch(typeof(ObjectPropertyInt)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPropertyInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyInt(ObjectPropertyInt other) : this() {
      rpcId_ = other.rpcId_;
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyInt Clone() {
      return new ObjectPropertyInt(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 210;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyInt> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PropertyInt.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyInt> propertyList_ = new pbc::RepeatedField<global::NFMsg.PropertyInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyInt> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPropertyInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPropertyInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(144, 13);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
          case 1680: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectPropertyFloat : pb::IMessage {
    private static readonly pb::MessageParser<ObjectPropertyFloat> _parser = new pb::MessageParser<ObjectPropertyFloat>(() => (ObjectPropertyFloat)MessagePool.Instance.Fetch(typeof(ObjectPropertyFloat)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPropertyFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyFloat(ObjectPropertyFloat other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyFloat Clone() {
      return new ObjectPropertyFloat(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyFloat> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PropertyFloat.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyFloat> propertyList_ = new pbc::RepeatedField<global::NFMsg.PropertyFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyFloat> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPropertyFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPropertyFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectPropertyString : pb::IMessage {
    private static readonly pb::MessageParser<ObjectPropertyString> _parser = new pb::MessageParser<ObjectPropertyString>(() => (ObjectPropertyString)MessagePool.Instance.Fetch(typeof(ObjectPropertyString)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPropertyString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyString(ObjectPropertyString other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyString Clone() {
      return new ObjectPropertyString(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyString> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PropertyString.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyString> propertyList_ = new pbc::RepeatedField<global::NFMsg.PropertyString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyString> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPropertyString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPropertyString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectPropertyObject : pb::IMessage {
    private static readonly pb::MessageParser<ObjectPropertyObject> _parser = new pb::MessageParser<ObjectPropertyObject>(() => (ObjectPropertyObject)MessagePool.Instance.Fetch(typeof(ObjectPropertyObject)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPropertyObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyObject(ObjectPropertyObject other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyObject Clone() {
      return new ObjectPropertyObject(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyObject> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PropertyObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyObject> propertyList_ = new pbc::RepeatedField<global::NFMsg.PropertyObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyObject> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPropertyObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPropertyObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectPropertyVector2 : pb::IMessage {
    private static readonly pb::MessageParser<ObjectPropertyVector2> _parser = new pb::MessageParser<ObjectPropertyVector2>(() => (ObjectPropertyVector2)MessagePool.Instance.Fetch(typeof(ObjectPropertyVector2)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPropertyVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyVector2(ObjectPropertyVector2 other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyVector2 Clone() {
      return new ObjectPropertyVector2(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyVector2> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PropertyVector2.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyVector2> propertyList_ = new pbc::RepeatedField<global::NFMsg.PropertyVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyVector2> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPropertyVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPropertyVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectPropertyVector3 : pb::IMessage {
    private static readonly pb::MessageParser<ObjectPropertyVector3> _parser = new pb::MessageParser<ObjectPropertyVector3>(() => (ObjectPropertyVector3)MessagePool.Instance.Fetch(typeof(ObjectPropertyVector3)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPropertyVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyVector3(ObjectPropertyVector3 other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyVector3 Clone() {
      return new ObjectPropertyVector3(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyVector3> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PropertyVector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyVector3> propertyList_ = new pbc::RepeatedField<global::NFMsg.PropertyVector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyVector3> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPropertyVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPropertyVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordInt : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordInt> _parser = new pb::MessageParser<ObjectRecordInt>(() => (ObjectRecordInt)MessagePool.Instance.Fetch(typeof(ObjectRecordInt)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordInt(ObjectRecordInt other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordInt Clone() {
      return new ObjectRecordInt(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordInt> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordInt.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordInt> propertyList_ = new pbc::RepeatedField<global::NFMsg.RecordInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordInt> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordFloat : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordFloat> _parser = new pb::MessageParser<ObjectRecordFloat>(() => (ObjectRecordFloat)MessagePool.Instance.Fetch(typeof(ObjectRecordFloat)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordFloat(ObjectRecordFloat other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordFloat Clone() {
      return new ObjectRecordFloat(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordFloat> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordFloat.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordFloat> propertyList_ = new pbc::RepeatedField<global::NFMsg.RecordFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordFloat> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordString : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordString> _parser = new pb::MessageParser<ObjectRecordString>(() => (ObjectRecordString)MessagePool.Instance.Fetch(typeof(ObjectRecordString)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordString(ObjectRecordString other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordString Clone() {
      return new ObjectRecordString(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordString> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordString.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordString> propertyList_ = new pbc::RepeatedField<global::NFMsg.RecordString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordString> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordObject : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordObject> _parser = new pb::MessageParser<ObjectRecordObject>(() => (ObjectRecordObject)MessagePool.Instance.Fetch(typeof(ObjectRecordObject)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordObject(ObjectRecordObject other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordObject Clone() {
      return new ObjectRecordObject(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordObject> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordObject> propertyList_ = new pbc::RepeatedField<global::NFMsg.RecordObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordObject> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordVector2 : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordVector2> _parser = new pb::MessageParser<ObjectRecordVector2>(() => (ObjectRecordVector2)MessagePool.Instance.Fetch(typeof(ObjectRecordVector2)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordVector2(ObjectRecordVector2 other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordVector2 Clone() {
      return new ObjectRecordVector2(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordVector2> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordVector2.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordVector2> propertyList_ = new pbc::RepeatedField<global::NFMsg.RecordVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordVector2> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordVector3 : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordVector3> _parser = new pb::MessageParser<ObjectRecordVector3>(() => (ObjectRecordVector3)MessagePool.Instance.Fetch(typeof(ObjectRecordVector3)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordVector3(ObjectRecordVector3 other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      propertyList_ = other.propertyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordVector3 Clone() {
      return new ObjectRecordVector3(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_list" field.</summary>
    public const int PropertyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordVector3> _repeated_propertyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordVector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordVector3> propertyList_ = new pbc::RepeatedField<global::NFMsg.RecordVector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordVector3> PropertyList {
      get { return propertyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!propertyList_.Equals(other.propertyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= propertyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      propertyList_.WriteTo(output, _repeated_propertyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += propertyList_.CalculateSize(_repeated_propertyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26: {
            propertyList_.AddEntriesFrom(input, _repeated_propertyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordSwap : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordSwap> _parser = new pb::MessageParser<ObjectRecordSwap>(() => (ObjectRecordSwap)MessagePool.Instance.Fetch(typeof(ObjectRecordSwap)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordSwap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordSwap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordSwap(ObjectRecordSwap other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      originRecordName_ = other.originRecordName_;
      targetRecordName_ = other.targetRecordName_;
      rowOrigin_ = other.rowOrigin_;
      rowTarget_ = other.rowTarget_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordSwap Clone() {
      return new ObjectRecordSwap(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "origin_record_name" field.</summary>
    public const int OriginRecordNameFieldNumber = 2;
    private pb::ByteString originRecordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginRecordName {
      get { return originRecordName_; }
      set {
        originRecordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_record_name" field.</summary>
    public const int TargetRecordNameFieldNumber = 3;
    private pb::ByteString targetRecordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetRecordName {
      get { return targetRecordName_; }
      set {
        targetRecordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_origin" field.</summary>
    public const int RowOriginFieldNumber = 4;
    private int rowOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RowOrigin {
      get { return rowOrigin_; }
      set {
        rowOrigin_ = value;
      }
    }

    /// <summary>Field number for the "row_target" field.</summary>
    public const int RowTargetFieldNumber = 5;
    private int rowTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RowTarget {
      get { return rowTarget_; }
      set {
        rowTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordSwap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordSwap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (OriginRecordName != other.OriginRecordName) return false;
      if (TargetRecordName != other.TargetRecordName) return false;
      if (RowOrigin != other.RowOrigin) return false;
      if (RowTarget != other.RowTarget) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (OriginRecordName.Length != 0) hash ^= OriginRecordName.GetHashCode();
      if (TargetRecordName.Length != 0) hash ^= TargetRecordName.GetHashCode();
      if (RowOrigin != 0) hash ^= RowOrigin.GetHashCode();
      if (RowTarget != 0) hash ^= RowTarget.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (OriginRecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OriginRecordName);
      }
      if (TargetRecordName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TargetRecordName);
      }
      if (RowOrigin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RowOrigin);
      }
      if (RowTarget != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RowTarget);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (OriginRecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginRecordName);
      }
      if (TargetRecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetRecordName);
      }
      if (RowOrigin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowOrigin);
      }
      if (RowTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowTarget);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            OriginRecordName = input.ReadBytes();
            break;
          }
          case 26: {
            TargetRecordName = input.ReadBytes();
            break;
          }
          case 32: {
            RowOrigin = input.ReadInt32();
            break;
          }
          case 40: {
            RowTarget = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordAddRow : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordAddRow> _parser = new pb::MessageParser<ObjectRecordAddRow>(() => (ObjectRecordAddRow)MessagePool.Instance.Fetch(typeof(ObjectRecordAddRow)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordAddRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordAddRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordAddRow(ObjectRecordAddRow other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      rowData_ = other.rowData_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordAddRow Clone() {
      return new ObjectRecordAddRow(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_data" field.</summary>
    public const int RowDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.RecordAddRowStruct> _repeated_rowData_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.RecordAddRowStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RecordAddRowStruct> rowData_ = new pbc::RepeatedField<global::NFMsg.RecordAddRowStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RecordAddRowStruct> RowData {
      get { return rowData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordAddRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordAddRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!rowData_.Equals(other.rowData_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= rowData_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      rowData_.WriteTo(output, _repeated_rowData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += rowData_.CalculateSize(_repeated_rowData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26: {
            rowData_.AddEntriesFrom(input, _repeated_rowData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordRemove : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordRemove> _parser = new pb::MessageParser<ObjectRecordRemove>(() => (ObjectRecordRemove)MessagePool.Instance.Fetch(typeof(ObjectRecordRemove)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordRemove(ObjectRecordRemove other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordName_ = other.recordName_;
      removeRow_ = other.removeRow_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordRemove Clone() {
      return new ObjectRecordRemove(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_name" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private pb::ByteString recordName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remove_row" field.</summary>
    public const int RemoveRowFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_removeRow_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> removeRow_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemoveRow {
      get { return removeRow_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (RecordName != other.RecordName) return false;
      if(!removeRow_.Equals(other.removeRow_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      hash ^= removeRow_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordName);
      }
      removeRow_.WriteTo(output, _repeated_removeRow_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordName);
      }
      size += removeRow_.CalculateSize(_repeated_removeRow_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            RecordName = input.ReadBytes();
            break;
          }
          case 26:
          case 24: {
            removeRow_.AddEntriesFrom(input, _repeated_removeRow_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectPropertyList : pb::IMessage {
    private static readonly pb::MessageParser<ObjectPropertyList> _parser = new pb::MessageParser<ObjectPropertyList>(() => (ObjectPropertyList)MessagePool.Instance.Fetch(typeof(ObjectPropertyList)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectPropertyList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyList(ObjectPropertyList other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      propertyIntList_ = other.propertyIntList_.Clone();
      propertyFloatList_ = other.propertyFloatList_.Clone();
      propertyStringList_ = other.propertyStringList_.Clone();
      propertyObjectList_ = other.propertyObjectList_.Clone();
      propertyVector2List_ = other.propertyVector2List_.Clone();
      propertyVector3List_ = other.propertyVector3List_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectPropertyList Clone() {
      return new ObjectPropertyList(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "property_int_list" field.</summary>
    public const int PropertyIntListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyInt> _repeated_propertyIntList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PropertyInt.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyInt> propertyIntList_ = new pbc::RepeatedField<global::NFMsg.PropertyInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyInt> PropertyIntList {
      get { return propertyIntList_; }
    }

    /// <summary>Field number for the "property_float_list" field.</summary>
    public const int PropertyFloatListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyFloat> _repeated_propertyFloatList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.PropertyFloat.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyFloat> propertyFloatList_ = new pbc::RepeatedField<global::NFMsg.PropertyFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyFloat> PropertyFloatList {
      get { return propertyFloatList_; }
    }

    /// <summary>Field number for the "property_string_list" field.</summary>
    public const int PropertyStringListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyString> _repeated_propertyStringList_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.PropertyString.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyString> propertyStringList_ = new pbc::RepeatedField<global::NFMsg.PropertyString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyString> PropertyStringList {
      get { return propertyStringList_; }
    }

    /// <summary>Field number for the "property_object_list" field.</summary>
    public const int PropertyObjectListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyObject> _repeated_propertyObjectList_codec
        = pb::FieldCodec.ForMessage(42, global::NFMsg.PropertyObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyObject> propertyObjectList_ = new pbc::RepeatedField<global::NFMsg.PropertyObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyObject> PropertyObjectList {
      get { return propertyObjectList_; }
    }

    /// <summary>Field number for the "property_vector2_list" field.</summary>
    public const int PropertyVector2ListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyVector2> _repeated_propertyVector2List_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.PropertyVector2.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyVector2> propertyVector2List_ = new pbc::RepeatedField<global::NFMsg.PropertyVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyVector2> PropertyVector2List {
      get { return propertyVector2List_; }
    }

    /// <summary>Field number for the "property_vector3_list" field.</summary>
    public const int PropertyVector3ListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyVector3> _repeated_propertyVector3List_codec
        = pb::FieldCodec.ForMessage(58, global::NFMsg.PropertyVector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyVector3> propertyVector3List_ = new pbc::RepeatedField<global::NFMsg.PropertyVector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyVector3> PropertyVector3List {
      get { return propertyVector3List_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectPropertyList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectPropertyList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!propertyIntList_.Equals(other.propertyIntList_)) return false;
      if(!propertyFloatList_.Equals(other.propertyFloatList_)) return false;
      if(!propertyStringList_.Equals(other.propertyStringList_)) return false;
      if(!propertyObjectList_.Equals(other.propertyObjectList_)) return false;
      if(!propertyVector2List_.Equals(other.propertyVector2List_)) return false;
      if(!propertyVector3List_.Equals(other.propertyVector3List_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= propertyIntList_.GetHashCode();
      hash ^= propertyFloatList_.GetHashCode();
      hash ^= propertyStringList_.GetHashCode();
      hash ^= propertyObjectList_.GetHashCode();
      hash ^= propertyVector2List_.GetHashCode();
      hash ^= propertyVector3List_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      propertyIntList_.WriteTo(output, _repeated_propertyIntList_codec);
      propertyFloatList_.WriteTo(output, _repeated_propertyFloatList_codec);
      propertyStringList_.WriteTo(output, _repeated_propertyStringList_codec);
      propertyObjectList_.WriteTo(output, _repeated_propertyObjectList_codec);
      propertyVector2List_.WriteTo(output, _repeated_propertyVector2List_codec);
      propertyVector3List_.WriteTo(output, _repeated_propertyVector3List_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += propertyIntList_.CalculateSize(_repeated_propertyIntList_codec);
      size += propertyFloatList_.CalculateSize(_repeated_propertyFloatList_codec);
      size += propertyStringList_.CalculateSize(_repeated_propertyStringList_codec);
      size += propertyObjectList_.CalculateSize(_repeated_propertyObjectList_codec);
      size += propertyVector2List_.CalculateSize(_repeated_propertyVector2List_codec);
      size += propertyVector3List_.CalculateSize(_repeated_propertyVector3List_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            propertyIntList_.AddEntriesFrom(input, _repeated_propertyIntList_codec);
            break;
          }
          case 26: {
            propertyFloatList_.AddEntriesFrom(input, _repeated_propertyFloatList_codec);
            break;
          }
          case 34: {
            propertyStringList_.AddEntriesFrom(input, _repeated_propertyStringList_codec);
            break;
          }
          case 42: {
            propertyObjectList_.AddEntriesFrom(input, _repeated_propertyObjectList_codec);
            break;
          }
          case 50: {
            propertyVector2List_.AddEntriesFrom(input, _repeated_propertyVector2List_codec);
            break;
          }
          case 58: {
            propertyVector3List_.AddEntriesFrom(input, _repeated_propertyVector3List_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiObjectPropertyList : pb::IMessage , GameNet.INetMessage {
    //-------------------------------GameNet.INetMessage START------------------------------ 
     public uint InstanceID { get; set; } 
     public object Context{ get; set; } 
     public GameNet.MsgAdapterType msgAdapterType{ get; set; } 
     public GameNet.PackageType packageType{ get { return GameNet.PackageType.PKG_DATA; } } 
     public void WriteToStream(System.IO.Stream output) 
     { 
      		// Encoding.UTF8.GetBytes(JsonObject.ToString()); 
     		pb::ProtoPreconditions.CheckNotNull(output, "output"); 
     		pb::CodedOutputStream codedOutput = new pb::CodedOutputStream(output); 
     		WriteTo(codedOutput); 
     		codedOutput.Flush(); 
     } 
     public object ParseFrom(byte[] bytes, int offset, int length) 
     { 
     		pb::ProtoPreconditions.CheckNotNull(bytes,"data");  
    		pb::CodedInputStream input = new pb::CodedInputStream(bytes,offset,length);  
    		MergeFrom(input);  
    		return this;  
    } 
     //-------------------------------RpcId ------------------------------ 
     		public int RpcIdNumber { get { return RpcIdArray[0]; } } 
     	   public int[] RpcIdArray => new int[] { 
    202 }; 
    //-------------------------------GameNet.INetMessage END------------------------------ 
     	   
    private static readonly pb::MessageParser<MultiObjectPropertyList> _parser = new pb::MessageParser<MultiObjectPropertyList>(() => (MultiObjectPropertyList)MessagePool.Instance.Fetch(typeof(MultiObjectPropertyList)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiObjectPropertyList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiObjectPropertyList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiObjectPropertyList(MultiObjectPropertyList other) : this() {
      rpcId_ = other.rpcId_;
      multiPlayerProperty_ = other.multiPlayerProperty_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiObjectPropertyList Clone() {
      return new MultiObjectPropertyList(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 202;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "multi_player_property" field.</summary>
    public const int MultiPlayerPropertyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.ObjectPropertyList> _repeated_multiPlayerProperty_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.ObjectPropertyList.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ObjectPropertyList> multiPlayerProperty_ = new pbc::RepeatedField<global::NFMsg.ObjectPropertyList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ObjectPropertyList> MultiPlayerProperty {
      get { return multiPlayerProperty_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiObjectPropertyList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiObjectPropertyList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if(!multiPlayerProperty_.Equals(other.multiPlayerProperty_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      hash ^= multiPlayerProperty_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      multiPlayerProperty_.WriteTo(output, _repeated_multiPlayerProperty_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      size += multiPlayerProperty_.CalculateSize(_repeated_multiPlayerProperty_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            multiPlayerProperty_.AddEntriesFrom(input, _repeated_multiPlayerProperty_codec);
            break;
          }
          case 1616: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectRecordList : pb::IMessage {
    private static readonly pb::MessageParser<ObjectRecordList> _parser = new pb::MessageParser<ObjectRecordList>(() => (ObjectRecordList)MessagePool.Instance.Fetch(typeof(ObjectRecordList)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRecordList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordList(ObjectRecordList other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      recordList_ = other.recordList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRecordList Clone() {
      return new ObjectRecordList(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "record_list" field.</summary>
    public const int RecordListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.ObjectRecordBase> _repeated_recordList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.ObjectRecordBase.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ObjectRecordBase> recordList_ = new pbc::RepeatedField<global::NFMsg.ObjectRecordBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ObjectRecordBase> RecordList {
      get { return recordList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRecordList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRecordList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if(!recordList_.Equals(other.recordList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      hash ^= recordList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      recordList_.WriteTo(output, _repeated_recordList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiObjectRecordList : pb::IMessage , GameNet.INetMessage {
    //-------------------------------GameNet.INetMessage START------------------------------ 
     public uint InstanceID { get; set; } 
     public object Context{ get; set; } 
     public GameNet.MsgAdapterType msgAdapterType{ get; set; } 
     public GameNet.PackageType packageType{ get { return GameNet.PackageType.PKG_DATA; } } 
     public void WriteToStream(System.IO.Stream output) 
     { 
      		// Encoding.UTF8.GetBytes(JsonObject.ToString()); 
     		pb::ProtoPreconditions.CheckNotNull(output, "output"); 
     		pb::CodedOutputStream codedOutput = new pb::CodedOutputStream(output); 
     		WriteTo(codedOutput); 
     		codedOutput.Flush(); 
     } 
     public object ParseFrom(byte[] bytes, int offset, int length) 
     { 
     		pb::ProtoPreconditions.CheckNotNull(bytes,"data");  
    		pb::CodedInputStream input = new pb::CodedInputStream(bytes,offset,length);  
    		MergeFrom(input);  
    		return this;  
    } 
     //-------------------------------RpcId ------------------------------ 
     		public int RpcIdNumber { get { return RpcIdArray[0]; } } 
     	   public int[] RpcIdArray => new int[] { 
    203 }; 
    //-------------------------------GameNet.INetMessage END------------------------------ 
     	   
    private static readonly pb::MessageParser<MultiObjectRecordList> _parser = new pb::MessageParser<MultiObjectRecordList>(() => (MultiObjectRecordList)MessagePool.Instance.Fetch(typeof(MultiObjectRecordList)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiObjectRecordList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiObjectRecordList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiObjectRecordList(MultiObjectRecordList other) : this() {
      rpcId_ = other.rpcId_;
      multiPlayerRecord_ = other.multiPlayerRecord_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiObjectRecordList Clone() {
      return new MultiObjectRecordList(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 203;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "multi_player_record" field.</summary>
    public const int MultiPlayerRecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.ObjectRecordList> _repeated_multiPlayerRecord_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.ObjectRecordList.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ObjectRecordList> multiPlayerRecord_ = new pbc::RepeatedField<global::NFMsg.ObjectRecordList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ObjectRecordList> MultiPlayerRecord {
      get { return multiPlayerRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiObjectRecordList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiObjectRecordList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if(!multiPlayerRecord_.Equals(other.multiPlayerRecord_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      hash ^= multiPlayerRecord_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      multiPlayerRecord_.WriteTo(output, _repeated_multiPlayerRecord_codec);
      if (RpcId != 0) {
        output.WriteRawTag(216, 12);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      size += multiPlayerRecord_.CalculateSize(_repeated_multiPlayerRecord_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            multiPlayerRecord_.AddEntriesFrom(input, _repeated_multiPlayerRecord_codec);
            break;
          }
          case 1624: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class MsgBase : pb::IMessage {
    private static readonly pb::MessageParser<MsgBase> _parser = new pb::MessageParser<MsgBase>(() => (MsgBase)MessagePool.Instance.Fetch(typeof(MsgBase)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase(MsgBase other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      msgData_ = other.msgData_;
      HashIdent = other.hashIdent_ != null ? other.HashIdent.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase Clone() {
      return new MsgBase(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    /// <summary>
    ///only be used between proxy-server and game-server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int MsgDataFieldNumber = 2;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MsgData {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash_ident" field.</summary>
    public const int HashIdentFieldNumber = 3;
    private global::NFMsg.Ident hashIdent_;
    /// <summary>
    ///repeated Ident  player_Client_list = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HashIdent {
      get { return hashIdent_; }
      set {
        hashIdent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (MsgData != other.MsgData) return false;
      if (!object.Equals(HashIdent, other.HashIdent)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
      if (hashIdent_ != null) hash ^= HashIdent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (MsgData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MsgData);
      }
      if (hashIdent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HashIdent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (MsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgData);
      }
      if (hashIdent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HashIdent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            MsgData = input.ReadBytes();
            break;
          }
          case 26: {
            if (hashIdent_ == null) {
              hashIdent_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(hashIdent_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCommand : pb::IMessage {
    private static readonly pb::MessageParser<ReqCommand> _parser = new pb::MessageParser<ReqCommand>(() => (ReqCommand)MessagePool.Instance.Fetch(typeof(ReqCommand)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgBaseReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCommand(ReqCommand other) : this() {
      ControlId = other.controlId_ != null ? other.ControlId.Clone() : null;
      commandId_ = other.commandId_;
      commandStrValue_ = other.commandStrValue_;
      commandValueInt_ = other.commandValueInt_;
      commandValueFloat_ = other.commandValueFloat_;
      commandValueStr_ = other.commandValueStr_;
      CommandValueObject = other.commandValueObject_ != null ? other.CommandValueObject.Clone() : null;
      row_ = other.row_;
      col_ = other.col_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCommand Clone() {
      return new ReqCommand(this);
    }

    /// <summary>Field number for the "control_id" field.</summary>
    public const int ControlIdFieldNumber = 1;
    private global::NFMsg.Ident controlId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ControlId {
      get { return controlId_; }
      set {
        controlId_ = value;
      }
    }

    /// <summary>Field number for the "command_id" field.</summary>
    public const int CommandIdFieldNumber = 2;
    private global::NFMsg.ReqCommand.Types.EGameCommandType commandId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqCommand.Types.EGameCommandType CommandId {
      get { return commandId_; }
      set {
        commandId_ = value;
      }
    }

    /// <summary>Field number for the "command_str_value" field.</summary>
    public const int CommandStrValueFieldNumber = 3;
    private pb::ByteString commandStrValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CommandStrValue {
      get { return commandStrValue_; }
      set {
        commandStrValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_value_int" field.</summary>
    public const int CommandValueIntFieldNumber = 4;
    private long commandValueInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommandValueInt {
      get { return commandValueInt_; }
      set {
        commandValueInt_ = value;
      }
    }

    /// <summary>Field number for the "command_value_float" field.</summary>
    public const int CommandValueFloatFieldNumber = 5;
    private double commandValueFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CommandValueFloat {
      get { return commandValueFloat_; }
      set {
        commandValueFloat_ = value;
      }
    }

    /// <summary>Field number for the "command_value_str" field.</summary>
    public const int CommandValueStrFieldNumber = 6;
    private pb::ByteString commandValueStr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CommandValueStr {
      get { return commandValueStr_; }
      set {
        commandValueStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_value_object" field.</summary>
    public const int CommandValueObjectFieldNumber = 7;
    private global::NFMsg.Ident commandValueObject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident CommandValueObject {
      get { return commandValueObject_; }
      set {
        commandValueObject_ = value;
      }
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 8;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 9;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlId, other.ControlId)) return false;
      if (CommandId != other.CommandId) return false;
      if (CommandStrValue != other.CommandStrValue) return false;
      if (CommandValueInt != other.CommandValueInt) return false;
      if (CommandValueFloat != other.CommandValueFloat) return false;
      if (CommandValueStr != other.CommandValueStr) return false;
      if (!object.Equals(CommandValueObject, other.CommandValueObject)) return false;
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlId_ != null) hash ^= ControlId.GetHashCode();
      if (CommandId != 0) hash ^= CommandId.GetHashCode();
      if (CommandStrValue.Length != 0) hash ^= CommandStrValue.GetHashCode();
      if (CommandValueInt != 0L) hash ^= CommandValueInt.GetHashCode();
      if (CommandValueFloat != 0D) hash ^= CommandValueFloat.GetHashCode();
      if (CommandValueStr.Length != 0) hash ^= CommandValueStr.GetHashCode();
      if (commandValueObject_ != null) hash ^= CommandValueObject.GetHashCode();
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (controlId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlId);
      }
      if (CommandId != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandId);
      }
      if (CommandStrValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CommandStrValue);
      }
      if (CommandValueInt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CommandValueInt);
      }
      if (CommandValueFloat != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CommandValueFloat);
      }
      if (CommandValueStr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(CommandValueStr);
      }
      if (commandValueObject_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CommandValueObject);
      }
      if (Row != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Col);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlId);
      }
      if (CommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandId);
      }
      if (CommandStrValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CommandStrValue);
      }
      if (CommandValueInt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommandValueInt);
      }
      if (CommandValueFloat != 0D) {
        size += 1 + 8;
      }
      if (CommandValueStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CommandValueStr);
      }
      if (commandValueObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommandValueObject);
      }
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (controlId_ == null) {
              controlId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(controlId_);
            break;
          }
          case 16: {
            commandId_ = (global::NFMsg.ReqCommand.Types.EGameCommandType) input.ReadEnum();
            break;
          }
          case 26: {
            CommandStrValue = input.ReadBytes();
            break;
          }
          case 32: {
            CommandValueInt = input.ReadInt64();
            break;
          }
          case 41: {
            CommandValueFloat = input.ReadDouble();
            break;
          }
          case 50: {
            CommandValueStr = input.ReadBytes();
            break;
          }
          case 58: {
            if (commandValueObject_ == null) {
              commandValueObject_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(commandValueObject_);
            break;
          }
          case 64: {
            Row = input.ReadInt32();
            break;
          }
          case 72: {
            Col = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameCommandType {
        /// <summary>
        ///[property_name,value]
        /// </summary>
        [pbr::OriginalName("EGCT_MODIY_PROPERTY")] EgctModiyProperty = 0,
        /// <summary>
        ///[item_id,count]
        /// </summary>
        [pbr::OriginalName("EGCT_MODIY_ITEM")] EgctModiyItem = 1,
        /// <summary>
        ///[object_index,count]
        /// </summary>
        [pbr::OriginalName("EGCT_CREATE_OBJECT")] EgctCreateObject = 2,
        /// <summary>
        /// </summary>
        [pbr::OriginalName("EGCT_ADD_ROLE_EXP")] EgctAddRoleExp = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

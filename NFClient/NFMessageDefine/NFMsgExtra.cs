// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgExtra.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgExtra.proto</summary>
  public static partial class NFMsgExtraReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgExtra.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgExtraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBORk1zZ0V4dHJhLnByb3RvEgVORk1zZxoOTkZEZWZpbmUucHJvdG8aD05G",
            "TXNnQmFzZS5wcm90byIpCgpSZXFBSU9ud2VyEhsKBWFpX2lkGAEgASgLMgwu",
            "TkZNc2cuSWRlbnQiegoIVGVhbUluZm8SHQoHdGVhbV9pZBgBIAEoCzIMLk5G",
            "TXNnLklkZW50EiAKCmNhcHRhaW5faWQYAiABKAsyDC5ORk1zZy5JZGVudBIt",
            "Cg50ZWFtbWVtYmVySW5mbxgDIAMoCzIVLk5GTXNnLlRlYW1tZW1iZXJJbmZv",
            "Im4KDlRlYW1tZW1iZXJJbmZvEh8KCXBsYXllcl9pZBgBIAEoCzIMLk5GTXNn",
            "LklkZW50EgwKBG5hbWUYAiABKAkSDgoGbkxldmVsGAMgASgFEgsKA2pvYhgE",
            "IAEoBRIQCghIZWFkSWNvbhgFIAEoCSJVChBSZXFBY2tDcmVhdGVUZWFtEh0K",
            "B3RlYW1faWQYASABKAsyDC5ORk1zZy5JZGVudBIiCgl4VGVhbUluZm8YAiAB",
            "KAsyDy5ORk1zZy5UZWFtSW5mbyJTCg5SZXFBY2tKb2luVGVhbRIdCgd0ZWFt",
            "X2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSIgoJeFRlYW1JbmZvGAIgASgLMg8u",
            "TkZNc2cuVGVhbUluZm8iVAoPUmVxQWNrTGVhdmVUZWFtEh0KB3RlYW1faWQY",
            "ASABKAsyDC5ORk1zZy5JZGVudBIiCgl4VGVhbUluZm8YAiABKAsyDy5ORk1z",
            "Zy5UZWFtSW5mbyLoAgoTUmVxQWNrT3ByVGVhbU1lbWJlchIdCgd0ZWFtX2lk",
            "GAEgASgLMgwuTkZNc2cuSWRlbnQSHwoJbWVtYmVyX2lkGAIgASgLMgwuTkZN",
            "c2cuSWRlbnQSPAoEdHlwZRgDIAEoDjIuLk5GTXNnLlJlcUFja09wclRlYW1N",
            "ZW1iZXIuRUdUZWFtTWVtYmVyT3ByVHlwZRIiCgl4VGVhbUluZm8YBCABKAsy",
            "Dy5ORk1zZy5UZWFtSW5mbyKuAQoTRUdUZWFtTWVtYmVyT3ByVHlwZRINCglF",
            "R0FUX0RPV04QABILCgdFR0FUX1VQEAESDQoJRUdBVF9LSUNLEAISEAoMRUdB",
            "VF9BUFBPSU5UEAMSDQoJRUdBVF9GSVJFEAQSDwoLRUdBVF9ERU1JU0UQBRIU",
            "ChBFR0FUX0FDQ0VQVEFQUExZEAYSEgoORUdBVF9ERU5ZQVBQTFkQBxIQCgxF",
            "R0FUX0tJQ0tPVVQQCCJ4ChBSZXFBY2tJbnZpdGVUZWFtEh0KB3RlYW1faWQY",
            "ASABKAsyDC5ORk1zZy5JZGVudBIdCgdzZWxmX2lkGAIgASgLMgwuTkZNc2cu",
            "SWRlbnQSJgoQaW52aXRlX3RhcmdldF9pZBgDIAEoCzIMLk5GTXNnLklkZW50",
            "IpsBChJSZXFUZWFtRW50ZXJFY3R5cGUSHQoHdGVhbV9pZBgBIAEoCzIMLk5G",
            "TXNnLklkZW50Eh0KB3NlbGZfaWQYAiABKAsyDC5ORk1zZy5JZGVudBIRCglu",
            "RWN0eXBlSUQYAyABKAUSEAoIbkdyb3VwSUQYBCABKAUSDwoHblJlc3VsdBgF",
            "IAEoBRIRCgluU2VydmVySUQYBiABKAUiiAEKEkFja1RlYW1FbnRlckVjdHlw",
            "ZRIdCgd0ZWFtX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSHQoHc2VsZl9pZBgC",
            "IAEoCzIMLk5GTXNnLklkZW50EhEKCW5FY3R5cGVJRBgDIAEoBRIQCghuR3Jv",
            "dXBJRBgEIAEoBRIPCgduUmVzdWx0GAUgASgFImoKEEdyaWRDbGFuQmFzZUlu",
            "Zm8SGAoCaWQYASABKAsyDC5ORk1zZy5JZGVudBINCgVsZXZlbBgCIAEoBRIN",
            "CgVjb3VudBgDIAEoBRIQCghyZXNvdXJjZRgEIAEoBRIMCgRpY29uGAUgASgM",
            "IikKEVJlcUJpZ01hcEdyaWRJbmZvEhQKDG1hcF90aXRsZV9pZBgBIAMoDCK5",
            "AQoSQmlnTWFwR3JpZEJhc2VJbmZvEgoKAmlkGAEgASgMEisKCmd1aWxkX2lu",
            "Zm8YAiABKAsyFy5ORk1zZy5HcmlkQ2xhbkJhc2VJbmZvEhQKDGtpbmd3YXJf",
            "dGltZRgKIAEoBRIgCgpraW5nd2FycmVyGAsgASgLMgwuTkZNc2cuSWRlbnQS",
            "FAoMaHVydGluZ190aW1lGBQgASgFEhwKBmh1cnRlchgVIAEoCzIMLk5GTXNn",
            "LklkZW50InoKDkJpZ01hcExlYXZlTXNnEhsKBW93bmVyGAEgASgLMgwuTkZN",
            "c2cuSWRlbnQSEgoKb3duZXJfbmFtZRgCIAEoDBIQCghtc2dfZGF0YRgDIAEo",
            "DBIQCghtc2dfdGltZRgEIAEoBRITCgtvd25lcl9sZXZlbBgFIAEoBSKcAQoQ",
            "QmlnTWFwV2FySGlzdG9yeRIpCghyZWRfaW5mbxgBIAEoCzIXLk5GTXNnLkdy",
            "aWRDbGFuQmFzZUluZm8SKgoJYmx1ZV9pbmZvGAIgASgLMhcuTkZNc2cuR3Jp",
            "ZENsYW5CYXNlSW5mbxIfCgl3aW5uZXJfaWQYCiABKAsyDC5ORk1zZy5JZGVu",
            "dBIQCgh3YXJfdGltZRgLIAEoBSLSAQoUQmlnTWFwR3JpZERldGFpbEluZm8S",
            "MQoOZ3JpZF9iYXNlX2luZm8YASABKAsyGS5ORk1zZy5CaWdNYXBHcmlkQmFz",
            "ZUluZm8SLwoOc3RheV9ndWlkX2xpc3QYAiADKAsyFy5ORk1zZy5HcmlkQ2xh",
            "bkJhc2VJbmZvEigKCWxlYXZlX21zZxgDIAMoCzIVLk5GTXNnLkJpZ01hcExl",
            "YXZlTXNnEiwKC3dhcl9oaXN0b3J5GAQgAygLMhcuTkZNc2cuQmlnTWFwV2Fy",
            "SGlzdG9yeSJCChFBY2tCaWdNYXBHcmlkSW5mbxItCghtYXBfZGF0YRgBIAMo",
            "CzIbLk5GTXNnLkJpZ01hcEdyaWREZXRhaWxJbmZvIg8KDVJlcUJpZ01hcElu",
            "Zm8iQgoNQWNrQmlnTWFwSW5mbxIxCg5ncmlkX2Jhc2VfaW5mbxgBIAMoCzIZ",
            "Lk5GTXNnLkJpZ01hcEdyaWRCYXNlSW5mbyJGCg5SZXFIb2xkTWFwR3JpZBIU",
            "CgxtYXBfdGl0bGVfaWQYASABKAwSHgoIZ3VpbGRfaWQYAiABKAsyDC5ORk1z",
            "Zy5JZGVudCIQCg5BY2tIb2xkTWFwR3JpZCJQCg5SZXFMZWF2ZU1hcE1zZxIU",
            "CgxtYXBfdGl0bGVfaWQYASABKAwSKAoJbGVhdmVfbXNnGAIgASgLMhUuTkZN",
            "c2cuQmlnTWFwTGVhdmVNc2ciEAoOQWNrTGVhdmVNYXBNc2ciJgoOUmVxR2V0",
            "TWFwQXdhcmQSFAoMbWFwX3RpdGxlX2lkGAEgASgMIhAKDkFja0dldE1hcEF3",
            "YXJkIiUKDVJlcU1hcEh1bnRpbmcSFAoMbWFwX3RpdGxlX2lkGAEgASgMIg8K",
            "DUFja01hcEh1bnRpbmciIgoNUmVxTWFwS2luZ1dhchIRCgltYXBfdGl0bGUY",
            "ASABKAwiIgoNQWNrTWFwS2luZ1dhchIRCgltYXBfdGl0bGUYASABKAxiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFDefineReflection.Descriptor, global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAIOnwer), global::NFMsg.ReqAIOnwer.Parser, new[]{ "AiId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TeamInfo), global::NFMsg.TeamInfo.Parser, new[]{ "TeamId", "CaptainId", "TeammemberInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TeammemberInfo), global::NFMsg.TeammemberInfo.Parser, new[]{ "PlayerId", "Name", "NLevel", "Job", "HeadIcon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCreateTeam), global::NFMsg.ReqAckCreateTeam.Parser, new[]{ "TeamId", "XTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckJoinTeam), global::NFMsg.ReqAckJoinTeam.Parser, new[]{ "TeamId", "XTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckLeaveTeam), global::NFMsg.ReqAckLeaveTeam.Parser, new[]{ "TeamId", "XTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckOprTeamMember), global::NFMsg.ReqAckOprTeamMember.Parser, new[]{ "TeamId", "MemberId", "Type", "XTeamInfo" }, null, new[]{ typeof(global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckInviteTeam), global::NFMsg.ReqAckInviteTeam.Parser, new[]{ "TeamId", "SelfId", "InviteTargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqTeamEnterEctype), global::NFMsg.ReqTeamEnterEctype.Parser, new[]{ "TeamId", "SelfId", "NEctypeID", "NGroupID", "NResult", "NServerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckTeamEnterEctype), global::NFMsg.AckTeamEnterEctype.Parser, new[]{ "TeamId", "SelfId", "NEctypeID", "NGroupID", "NResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.GridClanBaseInfo), global::NFMsg.GridClanBaseInfo.Parser, new[]{ "Id", "Level", "Count", "Resource", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBigMapGridInfo), global::NFMsg.ReqBigMapGridInfo.Parser, new[]{ "MapTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapGridBaseInfo), global::NFMsg.BigMapGridBaseInfo.Parser, new[]{ "Id", "GuildInfo", "KingwarTime", "Kingwarrer", "HurtingTime", "Hurter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapLeaveMsg), global::NFMsg.BigMapLeaveMsg.Parser, new[]{ "Owner", "OwnerName", "MsgData", "MsgTime", "OwnerLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapWarHistory), global::NFMsg.BigMapWarHistory.Parser, new[]{ "RedInfo", "BlueInfo", "WinnerId", "WarTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapGridDetailInfo), global::NFMsg.BigMapGridDetailInfo.Parser, new[]{ "GridBaseInfo", "StayGuidList", "LeaveMsg", "WarHistory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckBigMapGridInfo), global::NFMsg.AckBigMapGridInfo.Parser, new[]{ "MapData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBigMapInfo), global::NFMsg.ReqBigMapInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckBigMapInfo), global::NFMsg.AckBigMapInfo.Parser, new[]{ "GridBaseInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqHoldMapGrid), global::NFMsg.ReqHoldMapGrid.Parser, new[]{ "MapTitleId", "GuildId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckHoldMapGrid), global::NFMsg.AckHoldMapGrid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqLeaveMapMsg), global::NFMsg.ReqLeaveMapMsg.Parser, new[]{ "MapTitleId", "LeaveMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckLeaveMapMsg), global::NFMsg.AckLeaveMapMsg.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqGetMapAward), global::NFMsg.ReqGetMapAward.Parser, new[]{ "MapTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckGetMapAward), global::NFMsg.AckGetMapAward.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqMapHunting), global::NFMsg.ReqMapHunting.Parser, new[]{ "MapTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckMapHunting), global::NFMsg.AckMapHunting.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqMapKingWar), global::NFMsg.ReqMapKingWar.Parser, new[]{ "MapTitle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckMapKingWar), global::NFMsg.AckMapKingWar.Parser, new[]{ "MapTitle" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ////////////////AI/////////////////////////////////////////////////////////////////////////////////////
  ///EGMI_REQ_AI_ONWER
  /// </summary>
  public sealed partial class ReqAIOnwer : pb::IMessage {
    private static readonly pb::MessageParser<ReqAIOnwer> _parser = new pb::MessageParser<ReqAIOnwer>(() => (ReqAIOnwer)MessagePool.Instance.Fetch(typeof(ReqAIOnwer)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAIOnwer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer(ReqAIOnwer other) : this() {
      AiId = other.aiId_ != null ? other.AiId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer Clone() {
      return new ReqAIOnwer(this);
    }

    /// <summary>Field number for the "ai_id" field.</summary>
    public const int AiIdFieldNumber = 1;
    private global::NFMsg.Ident aiId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident AiId {
      get { return aiId_; }
      set {
        aiId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAIOnwer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAIOnwer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AiId, other.AiId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aiId_ != null) hash ^= AiId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aiId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AiId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aiId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AiId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (aiId_ == null) {
              aiId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(aiId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////组队/////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class TeamInfo : pb::IMessage {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => (TeamInfo)MessagePool.Instance.Fetch(typeof(TeamInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      CaptainId = other.captainId_ != null ? other.CaptainId.Clone() : null;
      teammemberInfo_ = other.teammemberInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "captain_id" field.</summary>
    public const int CaptainIdFieldNumber = 2;
    private global::NFMsg.Ident captainId_;
    /// <summary>
    ///队长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident CaptainId {
      get { return captainId_; }
      set {
        captainId_ = value;
      }
    }

    /// <summary>Field number for the "teammemberInfo" field.</summary>
    public const int TeammemberInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.TeammemberInfo> _repeated_teammemberInfo_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.TeammemberInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.TeammemberInfo> teammemberInfo_ = new pbc::RepeatedField<global::NFMsg.TeammemberInfo>();
    /// <summary>
    ///队伍成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.TeammemberInfo> TeammemberInfo {
      get { return teammemberInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(CaptainId, other.CaptainId)) return false;
      if(!teammemberInfo_.Equals(other.teammemberInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (captainId_ != null) hash ^= CaptainId.GetHashCode();
      hash ^= teammemberInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (captainId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CaptainId);
      }
      teammemberInfo_.WriteTo(output, _repeated_teammemberInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (captainId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptainId);
      }
      size += teammemberInfo_.CalculateSize(_repeated_teammemberInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (captainId_ == null) {
              captainId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(captainId_);
            break;
          }
          case 26: {
            teammemberInfo_.AddEntriesFrom(input, _repeated_teammemberInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeammemberInfo : pb::IMessage {
    private static readonly pb::MessageParser<TeammemberInfo> _parser = new pb::MessageParser<TeammemberInfo>(() => (TeammemberInfo)MessagePool.Instance.Fetch(typeof(TeammemberInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeammemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo(TeammemberInfo other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      name_ = other.name_;
      nLevel_ = other.nLevel_;
      job_ = other.job_;
      headIcon_ = other.headIcon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo Clone() {
      return new TeammemberInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    /// <summary>
    ///成员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nLevel" field.</summary>
    public const int NLevelFieldNumber = 3;
    private int nLevel_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLevel {
      get { return nLevel_; }
      set {
        nLevel_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 4;
    private int job_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 5;
    private string headIcon_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeammemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeammemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (Name != other.Name) return false;
      if (NLevel != other.NLevel) return false;
      if (Job != other.Job) return false;
      if (HeadIcon != other.HeadIcon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NLevel != 0) hash ^= NLevel.GetHashCode();
      if (Job != 0) hash ^= Job.GetHashCode();
      if (HeadIcon.Length != 0) hash ^= HeadIcon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (NLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NLevel);
      }
      if (Job != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Job);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadIcon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLevel);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Job);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            NLevel = input.ReadInt32();
            break;
          }
          case 32: {
            Job = input.ReadInt32();
            break;
          }
          case 42: {
            HeadIcon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CREATE_TEAM                       		= 860; 	// 申请创建队伍
  ///EGMI_ACK_CREATE_TEAM							= 861; 	// 创建队伍结果
  /// </summary>
  public sealed partial class ReqAckCreateTeam : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckCreateTeam> _parser = new pb::MessageParser<ReqAckCreateTeam>(() => (ReqAckCreateTeam)MessagePool.Instance.Fetch(typeof(ReqAckCreateTeam)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam(ReqAckCreateTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam Clone() {
      return new ReqAckCreateTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XTeamInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_JOIN_TEAM                         		= 862; 	// 申请加入队伍
  ///EGMI_ACK_JOIN_TEAM								= 863; 	// 加入队伍结果
  /// </summary>
  public sealed partial class ReqAckJoinTeam : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckJoinTeam> _parser = new pb::MessageParser<ReqAckJoinTeam>(() => (ReqAckJoinTeam)MessagePool.Instance.Fetch(typeof(ReqAckJoinTeam)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam(ReqAckJoinTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam Clone() {
      return new ReqAckJoinTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XTeamInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_LEAVE_TEAM                        		= 864; 	// 申请离开队伍/
  ///EGMI_ACK_LEAVE_TEAM								= 865; 	// 离开队伍结果 
  /// </summary>
  public sealed partial class ReqAckLeaveTeam : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckLeaveTeam> _parser = new pb::MessageParser<ReqAckLeaveTeam>(() => (ReqAckLeaveTeam)MessagePool.Instance.Fetch(typeof(ReqAckLeaveTeam)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam(ReqAckLeaveTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam Clone() {
      return new ReqAckLeaveTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XTeamInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_OPRMEMBER_TEAM							= 867; 	// 操作成员
  ///	EGMI_ACK_OPRMEMBER_TEAM							= 868; 	// 操作成员 
  /// </summary>
  public sealed partial class ReqAckOprTeamMember : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckOprTeamMember> _parser = new pb::MessageParser<ReqAckOprTeamMember>(() => (ReqAckOprTeamMember)MessagePool.Instance.Fetch(typeof(ReqAckOprTeamMember)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprTeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember(ReqAckOprTeamMember other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      MemberId = other.memberId_ != null ? other.MemberId.Clone() : null;
      type_ = other.type_;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember Clone() {
      return new ReqAckOprTeamMember(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 2;
    private global::NFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 4;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprTeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprTeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(MemberId, other.MemberId)) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (memberId_ != null) hash ^= MemberId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (memberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(XTeamInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (memberId_ == null) {
              memberId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(memberId_);
            break;
          }
          case 24: {
            type_ = (global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) input.ReadEnum();
            break;
          }
          case 34: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprTeamMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGTeamMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EgatDown = 0,
        [pbr::OriginalName("EGAT_UP")] EgatUp = 1,
        [pbr::OriginalName("EGAT_KICK")] EgatKick = 2,
        /// <summary>
        ///任命
        /// </summary>
        [pbr::OriginalName("EGAT_APPOINT")] EgatAppoint = 3,
        /// <summary>
        ///撤职
        /// </summary>
        [pbr::OriginalName("EGAT_FIRE")] EgatFire = 4,
        /// <summary>
        ///禅让
        /// </summary>
        [pbr::OriginalName("EGAT_DEMISE")] EgatDemise = 5,
        /// <summary>
        ///收人
        /// </summary>
        [pbr::OriginalName("EGAT_ACCEPTAPPLY")] EgatAcceptapply = 6,
        /// <summary>
        ///拒收
        /// </summary>
        [pbr::OriginalName("EGAT_DENYAPPLY")] EgatDenyapply = 7,
        /// <summary>
        ///开除
        /// </summary>
        [pbr::OriginalName("EGAT_KICKOUT")] EgatKickout = 8,
      }

    }
    #endregion

  }

  /// <summary>
  ///	EGMI_REQ_INVITE_TEAM							= 866; 	// 邀请加入队伍
  /// </summary>
  public sealed partial class ReqAckInviteTeam : pb::IMessage {
    private static readonly pb::MessageParser<ReqAckInviteTeam> _parser = new pb::MessageParser<ReqAckInviteTeam>(() => (ReqAckInviteTeam)MessagePool.Instance.Fetch(typeof(ReqAckInviteTeam)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam(ReqAckInviteTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      InviteTargetId = other.inviteTargetId_ != null ? other.InviteTargetId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam Clone() {
      return new ReqAckInviteTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "invite_target_id" field.</summary>
    public const int InviteTargetIdFieldNumber = 3;
    private global::NFMsg.Ident inviteTargetId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident InviteTargetId {
      get { return inviteTargetId_; }
      set {
        inviteTargetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(InviteTargetId, other.InviteTargetId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (inviteTargetId_ != null) hash ^= InviteTargetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfId);
      }
      if (inviteTargetId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InviteTargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (inviteTargetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InviteTargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 26: {
            if (inviteTargetId_ == null) {
              inviteTargetId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(inviteTargetId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_TEAM_ENTER_ECTYPE					= 869; 	// 组队进副本
  /// </summary>
  public sealed partial class ReqTeamEnterEctype : pb::IMessage {
    private static readonly pb::MessageParser<ReqTeamEnterEctype> _parser = new pb::MessageParser<ReqTeamEnterEctype>(() => (ReqTeamEnterEctype)MessagePool.Instance.Fetch(typeof(ReqTeamEnterEctype)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype(ReqTeamEnterEctype other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
      nServerID_ = other.nServerID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype Clone() {
      return new ReqTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int NEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int NGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int NResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int NServerIDFieldNumber = 6;
    private int nServerID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (NEctypeID != other.NEctypeID) return false;
      if (NGroupID != other.NGroupID) return false;
      if (NResult != other.NResult) return false;
      if (NServerID != other.NServerID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (NEctypeID != 0) hash ^= NEctypeID.GetHashCode();
      if (NGroupID != 0) hash ^= NGroupID.GetHashCode();
      if (NResult != 0) hash ^= NResult.GetHashCode();
      if (NServerID != 0) hash ^= NServerID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfId);
      }
      if (NEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NEctypeID);
      }
      if (NGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NGroupID);
      }
      if (NResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NResult);
      }
      if (NServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NServerID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (NEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEctypeID);
      }
      if (NGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGroupID);
      }
      if (NResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
      }
      if (NServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NServerID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            NEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            NGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            NResult = input.ReadInt32();
            break;
          }
          case 48: {
            NServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_TEAM_ENTER_ECTYPE						= 870; 	// 组队进副本
  /// </summary>
  public sealed partial class AckTeamEnterEctype : pb::IMessage {
    private static readonly pb::MessageParser<AckTeamEnterEctype> _parser = new pb::MessageParser<AckTeamEnterEctype>(() => (AckTeamEnterEctype)MessagePool.Instance.Fetch(typeof(AckTeamEnterEctype)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype(AckTeamEnterEctype other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype Clone() {
      return new AckTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int NEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int NGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int NResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (NEctypeID != other.NEctypeID) return false;
      if (NGroupID != other.NGroupID) return false;
      if (NResult != other.NResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (NEctypeID != 0) hash ^= NEctypeID.GetHashCode();
      if (NGroupID != 0) hash ^= NGroupID.GetHashCode();
      if (NResult != 0) hash ^= NResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfId);
      }
      if (NEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NEctypeID);
      }
      if (NGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NGroupID);
      }
      if (NResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (NEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEctypeID);
      }
      if (NGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGroupID);
      }
      if (NResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            NEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            NGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            NResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////big map/////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class GridClanBaseInfo : pb::IMessage {
    private static readonly pb::MessageParser<GridClanBaseInfo> _parser = new pb::MessageParser<GridClanBaseInfo>(() => (GridClanBaseInfo)MessagePool.Instance.Fetch(typeof(GridClanBaseInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GridClanBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo(GridClanBaseInfo other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      level_ = other.level_;
      count_ = other.count_;
      resource_ = other.resource_;
      icon_ = other.icon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo Clone() {
      return new GridClanBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::NFMsg.Ident id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 4;
    private int resource_;
    /// <summary>
    ///资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 5;
    private pb::ByteString icon_ = pb::ByteString.Empty;
    /// <summary>
    ///Icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GridClanBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GridClanBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Level != other.Level) return false;
      if (Count != other.Count) return false;
      if (Resource != other.Resource) return false;
      if (Icon != other.Icon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Resource != 0) hash ^= Resource.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Resource != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Resource);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Icon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resource);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Icon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Resource = input.ReadInt32();
            break;
          }
          case 42: {
            Icon = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_INFO
  /// </summary>
  public sealed partial class ReqBigMapGridInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqBigMapGridInfo> _parser = new pb::MessageParser<ReqBigMapGridInfo>(() => (ReqBigMapGridInfo)MessagePool.Instance.Fetch(typeof(ReqBigMapGridInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo(ReqBigMapGridInfo other) : this() {
      mapTitleId_ = other.mapTitleId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo Clone() {
      return new ReqBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_mapTitleId_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> mapTitleId_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> MapTitleId {
      get { return mapTitleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapTitleId_.Equals(other.mapTitleId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapTitleId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapTitleId_.WriteTo(output, _repeated_mapTitleId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapTitleId_.CalculateSize(_repeated_mapTitleId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mapTitleId_.AddEntriesFrom(input, _repeated_mapTitleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridBaseInfo : pb::IMessage {
    private static readonly pb::MessageParser<BigMapGridBaseInfo> _parser = new pb::MessageParser<BigMapGridBaseInfo>(() => (BigMapGridBaseInfo)MessagePool.Instance.Fetch(typeof(BigMapGridBaseInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo(BigMapGridBaseInfo other) : this() {
      id_ = other.id_;
      GuildInfo = other.guildInfo_ != null ? other.GuildInfo.Clone() : null;
      kingwarTime_ = other.kingwarTime_;
      Kingwarrer = other.kingwarrer_ != null ? other.Kingwarrer.Clone() : null;
      hurtingTime_ = other.hurtingTime_;
      Hurter = other.hurter_ != null ? other.Hurter.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo Clone() {
      return new BigMapGridBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    ///GridID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_info" field.</summary>
    public const int GuildInfoFieldNumber = 2;
    private global::NFMsg.GridClanBaseInfo guildInfo_;
    /// <summary>
    ///所属占领公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo GuildInfo {
      get { return guildInfo_; }
      set {
        guildInfo_ = value;
      }
    }

    /// <summary>Field number for the "kingwar_time" field.</summary>
    public const int KingwarTimeFieldNumber = 10;
    private int kingwarTime_;
    /// <summary>
    ///kingwar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KingwarTime {
      get { return kingwarTime_; }
      set {
        kingwarTime_ = value;
      }
    }

    /// <summary>Field number for the "kingwarrer" field.</summary>
    public const int KingwarrerFieldNumber = 11;
    private global::NFMsg.Ident kingwarrer_;
    /// <summary>
    ///发动者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Kingwarrer {
      get { return kingwarrer_; }
      set {
        kingwarrer_ = value;
      }
    }

    /// <summary>Field number for the "hurting_time" field.</summary>
    public const int HurtingTimeFieldNumber = 20;
    private int hurtingTime_;
    /// <summary>
    ///hurting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtingTime {
      get { return hurtingTime_; }
      set {
        hurtingTime_ = value;
      }
    }

    /// <summary>Field number for the "hurter" field.</summary>
    public const int HurterFieldNumber = 21;
    private global::NFMsg.Ident hurter_;
    /// <summary>
    ///狩猎者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Hurter {
      get { return hurter_; }
      set {
        hurter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(GuildInfo, other.GuildInfo)) return false;
      if (KingwarTime != other.KingwarTime) return false;
      if (!object.Equals(Kingwarrer, other.Kingwarrer)) return false;
      if (HurtingTime != other.HurtingTime) return false;
      if (!object.Equals(Hurter, other.Hurter)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (guildInfo_ != null) hash ^= GuildInfo.GetHashCode();
      if (KingwarTime != 0) hash ^= KingwarTime.GetHashCode();
      if (kingwarrer_ != null) hash ^= Kingwarrer.GetHashCode();
      if (HurtingTime != 0) hash ^= HurtingTime.GetHashCode();
      if (hurter_ != null) hash ^= Hurter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (guildInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuildInfo);
      }
      if (KingwarTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(KingwarTime);
      }
      if (kingwarrer_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Kingwarrer);
      }
      if (HurtingTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(HurtingTime);
      }
      if (hurter_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Hurter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (guildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildInfo);
      }
      if (KingwarTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KingwarTime);
      }
      if (kingwarrer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kingwarrer);
      }
      if (HurtingTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HurtingTime);
      }
      if (hurter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hurter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            if (guildInfo_ == null) {
              guildInfo_ = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(guildInfo_);
            break;
          }
          case 80: {
            KingwarTime = input.ReadInt32();
            break;
          }
          case 90: {
            if (kingwarrer_ == null) {
              kingwarrer_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(kingwarrer_);
            break;
          }
          case 160: {
            HurtingTime = input.ReadInt32();
            break;
          }
          case 170: {
            if (hurter_ == null) {
              hurter_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(hurter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapLeaveMsg : pb::IMessage {
    private static readonly pb::MessageParser<BigMapLeaveMsg> _parser = new pb::MessageParser<BigMapLeaveMsg>(() => (BigMapLeaveMsg)MessagePool.Instance.Fetch(typeof(BigMapLeaveMsg)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapLeaveMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg(BigMapLeaveMsg other) : this() {
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      ownerName_ = other.ownerName_;
      msgData_ = other.msgData_;
      msgTime_ = other.msgTime_;
      ownerLevel_ = other.ownerLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg Clone() {
      return new BigMapLeaveMsg(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::NFMsg.Ident owner_;
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 2;
    private pb::ByteString ownerName_ = pb::ByteString.Empty;
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int MsgDataFieldNumber = 3;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    /// <summary>
    ///留言内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MsgData {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_time" field.</summary>
    public const int MsgTimeFieldNumber = 4;
    private int msgTime_;
    /// <summary>
    ///留言时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgTime {
      get { return msgTime_; }
      set {
        msgTime_ = value;
      }
    }

    /// <summary>Field number for the "owner_level" field.</summary>
    public const int OwnerLevelFieldNumber = 5;
    private int ownerLevel_;
    /// <summary>
    ///留言时level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerLevel {
      get { return ownerLevel_; }
      set {
        ownerLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapLeaveMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapLeaveMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (OwnerName != other.OwnerName) return false;
      if (MsgData != other.MsgData) return false;
      if (MsgTime != other.MsgTime) return false;
      if (OwnerLevel != other.OwnerLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
      if (MsgTime != 0) hash ^= MsgTime.GetHashCode();
      if (OwnerLevel != 0) hash ^= OwnerLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OwnerName);
      }
      if (MsgData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MsgData);
      }
      if (MsgTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MsgTime);
      }
      if (OwnerLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OwnerLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerName);
      }
      if (MsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgData);
      }
      if (MsgTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgTime);
      }
      if (OwnerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 18: {
            OwnerName = input.ReadBytes();
            break;
          }
          case 26: {
            MsgData = input.ReadBytes();
            break;
          }
          case 32: {
            MsgTime = input.ReadInt32();
            break;
          }
          case 40: {
            OwnerLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapWarHistory : pb::IMessage {
    private static readonly pb::MessageParser<BigMapWarHistory> _parser = new pb::MessageParser<BigMapWarHistory>(() => (BigMapWarHistory)MessagePool.Instance.Fetch(typeof(BigMapWarHistory)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapWarHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory(BigMapWarHistory other) : this() {
      RedInfo = other.redInfo_ != null ? other.RedInfo.Clone() : null;
      BlueInfo = other.blueInfo_ != null ? other.BlueInfo.Clone() : null;
      WinnerId = other.winnerId_ != null ? other.WinnerId.Clone() : null;
      warTime_ = other.warTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory Clone() {
      return new BigMapWarHistory(this);
    }

    /// <summary>Field number for the "red_info" field.</summary>
    public const int RedInfoFieldNumber = 1;
    private global::NFMsg.GridClanBaseInfo redInfo_;
    /// <summary>
    ///红方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo RedInfo {
      get { return redInfo_; }
      set {
        redInfo_ = value;
      }
    }

    /// <summary>Field number for the "blue_info" field.</summary>
    public const int BlueInfoFieldNumber = 2;
    private global::NFMsg.GridClanBaseInfo blueInfo_;
    /// <summary>
    ///蓝方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo BlueInfo {
      get { return blueInfo_; }
      set {
        blueInfo_ = value;
      }
    }

    /// <summary>Field number for the "winner_id" field.</summary>
    public const int WinnerIdFieldNumber = 10;
    private global::NFMsg.Ident winnerId_;
    /// <summary>
    ///winner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = value;
      }
    }

    /// <summary>Field number for the "war_time" field.</summary>
    public const int WarTimeFieldNumber = 11;
    private int warTime_;
    /// <summary>
    ///war时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarTime {
      get { return warTime_; }
      set {
        warTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapWarHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapWarHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RedInfo, other.RedInfo)) return false;
      if (!object.Equals(BlueInfo, other.BlueInfo)) return false;
      if (!object.Equals(WinnerId, other.WinnerId)) return false;
      if (WarTime != other.WarTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (redInfo_ != null) hash ^= RedInfo.GetHashCode();
      if (blueInfo_ != null) hash ^= BlueInfo.GetHashCode();
      if (winnerId_ != null) hash ^= WinnerId.GetHashCode();
      if (WarTime != 0) hash ^= WarTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (redInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RedInfo);
      }
      if (blueInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlueInfo);
      }
      if (winnerId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WinnerId);
      }
      if (WarTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(WarTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (redInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedInfo);
      }
      if (blueInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlueInfo);
      }
      if (winnerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WinnerId);
      }
      if (WarTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (redInfo_ == null) {
              redInfo_ = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(redInfo_);
            break;
          }
          case 18: {
            if (blueInfo_ == null) {
              blueInfo_ = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(blueInfo_);
            break;
          }
          case 82: {
            if (winnerId_ == null) {
              winnerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(winnerId_);
            break;
          }
          case 88: {
            WarTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<BigMapGridDetailInfo> _parser = new pb::MessageParser<BigMapGridDetailInfo>(() => (BigMapGridDetailInfo)MessagePool.Instance.Fetch(typeof(BigMapGridDetailInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridDetailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo(BigMapGridDetailInfo other) : this() {
      GridBaseInfo = other.gridBaseInfo_ != null ? other.GridBaseInfo.Clone() : null;
      stayGuidList_ = other.stayGuidList_.Clone();
      leaveMsg_ = other.leaveMsg_.Clone();
      warHistory_ = other.warHistory_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo Clone() {
      return new BigMapGridDetailInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int GridBaseInfoFieldNumber = 1;
    private global::NFMsg.BigMapGridBaseInfo gridBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.BigMapGridBaseInfo GridBaseInfo {
      get { return gridBaseInfo_; }
      set {
        gridBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "stay_guid_list" field.</summary>
    public const int StayGuidListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.GridClanBaseInfo> _repeated_stayGuidList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.GridClanBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.GridClanBaseInfo> stayGuidList_ = new pbc::RepeatedField<global::NFMsg.GridClanBaseInfo>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.GridClanBaseInfo> StayGuidList {
      get { return stayGuidList_; }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int LeaveMsgFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapLeaveMsg> _repeated_leaveMsg_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.BigMapLeaveMsg.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg> leaveMsg_ = new pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg>();
    /// <summary>
    ///此地图留言(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg> LeaveMsg {
      get { return leaveMsg_; }
    }

    /// <summary>Field number for the "war_history" field.</summary>
    public const int WarHistoryFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapWarHistory> _repeated_warHistory_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.BigMapWarHistory.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapWarHistory> warHistory_ = new pbc::RepeatedField<global::NFMsg.BigMapWarHistory>();
    /// <summary>
    ///此地图历史战争信息(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapWarHistory> WarHistory {
      get { return warHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridDetailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridDetailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GridBaseInfo, other.GridBaseInfo)) return false;
      if(!stayGuidList_.Equals(other.stayGuidList_)) return false;
      if(!leaveMsg_.Equals(other.leaveMsg_)) return false;
      if(!warHistory_.Equals(other.warHistory_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gridBaseInfo_ != null) hash ^= GridBaseInfo.GetHashCode();
      hash ^= stayGuidList_.GetHashCode();
      hash ^= leaveMsg_.GetHashCode();
      hash ^= warHistory_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gridBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GridBaseInfo);
      }
      stayGuidList_.WriteTo(output, _repeated_stayGuidList_codec);
      leaveMsg_.WriteTo(output, _repeated_leaveMsg_codec);
      warHistory_.WriteTo(output, _repeated_warHistory_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gridBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GridBaseInfo);
      }
      size += stayGuidList_.CalculateSize(_repeated_stayGuidList_codec);
      size += leaveMsg_.CalculateSize(_repeated_leaveMsg_codec);
      size += warHistory_.CalculateSize(_repeated_warHistory_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gridBaseInfo_ == null) {
              gridBaseInfo_ = new global::NFMsg.BigMapGridBaseInfo();
            }
            input.ReadMessage(gridBaseInfo_);
            break;
          }
          case 18: {
            stayGuidList_.AddEntriesFrom(input, _repeated_stayGuidList_codec);
            break;
          }
          case 26: {
            leaveMsg_.AddEntriesFrom(input, _repeated_leaveMsg_codec);
            break;
          }
          case 34: {
            warHistory_.AddEntriesFrom(input, _repeated_warHistory_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_INFO
  /// </summary>
  public sealed partial class AckBigMapGridInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckBigMapGridInfo> _parser = new pb::MessageParser<AckBigMapGridInfo>(() => (AckBigMapGridInfo)MessagePool.Instance.Fetch(typeof(AckBigMapGridInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo(AckBigMapGridInfo other) : this() {
      mapData_ = other.mapData_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo Clone() {
      return new AckBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_data" field.</summary>
    public const int MapDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapGridDetailInfo> _repeated_mapData_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.BigMapGridDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo> mapData_ = new pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo> MapData {
      get { return mapData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapData_.Equals(other.mapData_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapData_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapData_.WriteTo(output, _repeated_mapData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapData_.CalculateSize(_repeated_mapData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mapData_.AddEntriesFrom(input, _repeated_mapData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_BIG_MAP_GRID
  /// </summary>
  public sealed partial class ReqBigMapInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReqBigMapInfo> _parser = new pb::MessageParser<ReqBigMapInfo>(() => (ReqBigMapInfo)MessagePool.Instance.Fetch(typeof(ReqBigMapInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo(ReqBigMapInfo other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo Clone() {
      return new ReqBigMapInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_BIG_MAP_GRID
  /// </summary>
  public sealed partial class AckBigMapInfo : pb::IMessage {
    private static readonly pb::MessageParser<AckBigMapInfo> _parser = new pb::MessageParser<AckBigMapInfo>(() => (AckBigMapInfo)MessagePool.Instance.Fetch(typeof(AckBigMapInfo)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo(AckBigMapInfo other) : this() {
      gridBaseInfo_ = other.gridBaseInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo Clone() {
      return new AckBigMapInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int GridBaseInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapGridBaseInfo> _repeated_gridBaseInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.BigMapGridBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo> gridBaseInfo_ = new pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo> GridBaseInfo {
      get { return gridBaseInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gridBaseInfo_.Equals(other.gridBaseInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gridBaseInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gridBaseInfo_.WriteTo(output, _repeated_gridBaseInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gridBaseInfo_.CalculateSize(_repeated_gridBaseInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gridBaseInfo_.AddEntriesFrom(input, _repeated_gridBaseInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class ReqHoldMapGrid : pb::IMessage {
    private static readonly pb::MessageParser<ReqHoldMapGrid> _parser = new pb::MessageParser<ReqHoldMapGrid>(() => (ReqHoldMapGrid)MessagePool.Instance.Fetch(typeof(ReqHoldMapGrid)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid(ReqHoldMapGrid other) : this() {
      mapTitleId_ = other.mapTitleId_;
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid Clone() {
      return new ReqHoldMapGrid(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private global::NFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      if (!object.Equals(GuildId, other.GuildId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
      if (guildId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
          case 18: {
            if (guildId_ == null) {
              guildId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class AckHoldMapGrid : pb::IMessage {
    private static readonly pb::MessageParser<AckHoldMapGrid> _parser = new pb::MessageParser<AckHoldMapGrid>(() => (AckHoldMapGrid)MessagePool.Instance.Fetch(typeof(AckHoldMapGrid)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid(AckHoldMapGrid other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid Clone() {
      return new AckHoldMapGrid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class ReqLeaveMapMsg : pb::IMessage {
    private static readonly pb::MessageParser<ReqLeaveMapMsg> _parser = new pb::MessageParser<ReqLeaveMapMsg>(() => (ReqLeaveMapMsg)MessagePool.Instance.Fetch(typeof(ReqLeaveMapMsg)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg(ReqLeaveMapMsg other) : this() {
      mapTitleId_ = other.mapTitleId_;
      LeaveMsg = other.leaveMsg_ != null ? other.LeaveMsg.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg Clone() {
      return new ReqLeaveMapMsg(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int LeaveMsgFieldNumber = 2;
    private global::NFMsg.BigMapLeaveMsg leaveMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.BigMapLeaveMsg LeaveMsg {
      get { return leaveMsg_; }
      set {
        leaveMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      if (!object.Equals(LeaveMsg, other.LeaveMsg)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (leaveMsg_ != null) hash ^= LeaveMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
      if (leaveMsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaveMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      if (leaveMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
          case 18: {
            if (leaveMsg_ == null) {
              leaveMsg_ = new global::NFMsg.BigMapLeaveMsg();
            }
            input.ReadMessage(leaveMsg_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class AckLeaveMapMsg : pb::IMessage {
    private static readonly pb::MessageParser<AckLeaveMapMsg> _parser = new pb::MessageParser<AckLeaveMapMsg>(() => (AckLeaveMapMsg)MessagePool.Instance.Fetch(typeof(AckLeaveMapMsg)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg(AckLeaveMapMsg other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg Clone() {
      return new AckLeaveMapMsg(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class ReqGetMapAward : pb::IMessage {
    private static readonly pb::MessageParser<ReqGetMapAward> _parser = new pb::MessageParser<ReqGetMapAward>(() => (ReqGetMapAward)MessagePool.Instance.Fetch(typeof(ReqGetMapAward)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward(ReqGetMapAward other) : this() {
      mapTitleId_ = other.mapTitleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward Clone() {
      return new ReqGetMapAward(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class AckGetMapAward : pb::IMessage {
    private static readonly pb::MessageParser<AckGetMapAward> _parser = new pb::MessageParser<AckGetMapAward>(() => (AckGetMapAward)MessagePool.Instance.Fetch(typeof(AckGetMapAward)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward(AckGetMapAward other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward Clone() {
      return new AckGetMapAward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class ReqMapHunting : pb::IMessage {
    private static readonly pb::MessageParser<ReqMapHunting> _parser = new pb::MessageParser<ReqMapHunting>(() => (ReqMapHunting)MessagePool.Instance.Fetch(typeof(ReqMapHunting)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting(ReqMapHunting other) : this() {
      mapTitleId_ = other.mapTitleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting Clone() {
      return new ReqMapHunting(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class AckMapHunting : pb::IMessage {
    private static readonly pb::MessageParser<AckMapHunting> _parser = new pb::MessageParser<AckMapHunting>(() => (AckMapHunting)MessagePool.Instance.Fetch(typeof(AckMapHunting)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting(AckMapHunting other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting Clone() {
      return new AckMapHunting(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class ReqMapKingWar : pb::IMessage {
    private static readonly pb::MessageParser<ReqMapKingWar> _parser = new pb::MessageParser<ReqMapKingWar>(() => (ReqMapKingWar)MessagePool.Instance.Fetch(typeof(ReqMapKingWar)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar(ReqMapKingWar other) : this() {
      mapTitle_ = other.mapTitle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar Clone() {
      return new ReqMapKingWar(this);
    }

    /// <summary>Field number for the "map_title" field.</summary>
    public const int MapTitleFieldNumber = 1;
    private pb::ByteString mapTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitle {
      get { return mapTitle_; }
      set {
        mapTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitle != other.MapTitle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitle.Length != 0) hash ^= MapTitle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapTitle = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class AckMapKingWar : pb::IMessage {
    private static readonly pb::MessageParser<AckMapKingWar> _parser = new pb::MessageParser<AckMapKingWar>(() => (AckMapKingWar)MessagePool.Instance.Fetch(typeof(AckMapKingWar)));
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar(AckMapKingWar other) : this() {
      mapTitle_ = other.mapTitle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar Clone() {
      return new AckMapKingWar(this);
    }

    /// <summary>Field number for the "map_title" field.</summary>
    public const int MapTitleFieldNumber = 1;
    private pb::ByteString mapTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitle {
      get { return mapTitle_; }
      set {
        mapTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitle != other.MapTitle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitle.Length != 0) hash ^= MapTitle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapTitle = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
